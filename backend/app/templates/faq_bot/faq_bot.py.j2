import logging
import os
from pathlib import Path
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import BotCommand, BotCommandScopeAllPrivateChats, BotCommandScopeChat, FSInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.faq_db import get_faq_entries, add_faq_entry, delete_faq_entry
from utils.media import save_media_file, delete_media_file
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
load_dotenv()
BOT_TOKEN = os.getenv("TOKEN") or ""
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN)")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ID = {{ project_id }}        # ID –ø—Ä–æ–µ–∫—Ç–∞ (–¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö FAQ –≤ –ë–î)
ADMIN_CHAT = {{ admin_chat_id }}     # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–ª–∏ –≥—Ä—É–ø–ø—ã)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()  # –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á (apscheduler)

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
BASE_DIR = Path(__file__).parent
MEDIA_DIR = BASE_DIR / "media"
MEDIA_ROOT = MEDIA_DIR / str(PROJECT_ID)
MEDIA_ROOT.mkdir(parents=True, exist_ok=True)

# –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞
class FAQState(StatesGroup):
    waiting_for_choice = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

class AdminStates(StatesGroup):
    in_menu               = State()  # –ê–¥–º–∏–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    adding_question       = State()  # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    adding_answer         = State()  # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    adding_media          = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞ "–Ω–µ—Ç"
    deleting_selection    = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ FAQ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    deleting_confirmation = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è FAQ

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ FAQ
def get_entries():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö FAQ-–∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."""
    return get_faq_entries(PROJECT_ID) or []

def add_entry(question: str, answer: str, media: str = ""):
    """–î–æ–±–∞–≤–∏—Ç—å FAQ-–∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –∏ –≤–µ—Ä–Ω—É—Ç—å –µ—ë ID."""
    return add_faq_entry(PROJECT_ID, question, answer, media)

def delete_entry(entry_id: int):
    """–£–¥–∞–ª–∏—Ç—å FAQ-–∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –ø–æ ID."""
    return delete_faq_entry(PROJECT_ID, entry_id)

def format_questions(entries: list[dict]) -> str:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    text = "üìñ FAQ ‚Äî –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n"
    for idx, e in enumerate(entries, start=1):
        text += f"{idx}. {e['question']}\n"
    return text

def build_admin_menu() -> types.InlineKeyboardMarkup:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å FAQ", callback_data="admin_add_faq")
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å FAQ", callback_data="admin_del_faq")
    kb.adjust(2)
    return kb.as_markup()

from aiogram import Router
admin_router = Router()
user_router = Router()

@dp.message(Command('start'))
async def cmd_start(msg: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await state.clear()
    if msg.chat.id == ADMIN_CHAT:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await msg.answer(
            "üëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FAQ:",
            reply_markup=build_admin_menu()
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
        await state.set_state(AdminStates.in_menu)
    else:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await msg.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
            "–ù–∞–∂–º–∏—Ç–µ /list –∏–ª–∏ –∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã."
        )

@dp.message(Command("chatid"))
async def cmd_chatid(m: types.Message):
    await m.answer(f"Chat ID: `{m.chat.id}`", parse_mode="Markdown")

@dp.message(Command('help'))
async def cmd_help(msg: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help."""
    if msg.chat.id == ADMIN_CHAT:
        # –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await msg.answer(
            "üõ† <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ FAQ</b>:\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/add ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç (—Å –º–µ–¥–∏–∞)\n"
            "/delete ‚Äì —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–∑ FAQ\n"
            "/list ‚Äì –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ FAQ (–∫–∞–∫ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)\n\n"
            "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ."
        )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–º–æ—â–∏
        await msg.answer("üõ† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é FAQ:", reply_markup=build_admin_menu())
        await AdminStates.in_menu.set()
    else:
        # –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await msg.answer(
            "‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç?</b>\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /list –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä–µ—á–µ–Ω—å FAQ.\n"
            "–ó–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."
        )

@user_router.message(Command('list'), lambda m: m.chat.id != ADMIN_CHAT)
async def cmd_list(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ FAQ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    entries = get_entries()
    if not entries:
        await message.answer("‚ùå –í FAQ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    text = format_questions(entries)

    await message.answer(text)
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(FAQState.waiting_for_choice)

@user_router.callback_query(lambda c: c.data == "faq_list")
async def user_refresh_list(
    c: types.CallbackQuery,
    state: FSMContext
):
    entries = get_entries()
    if not entries:
        return await c.answer("‚ùå FAQ –ø—É—Å—Ç.", show_alert=True)

    # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å) —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    text = format_questions(entries)

    await c.message.edit_text(text)
    await c.answer()  # —É–±—Ä–∞—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª

    # –°–Ω–æ–≤–∞ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞,
    # —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫—É –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–∞–∂–∏–º–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    await state.set_state(FAQState.waiting_for_choice)

@user_router.message(StateFilter(FAQState.waiting_for_choice), lambda m: m.chat.id != ADMIN_CHAT)
async def user_select_question(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞)."""
    user_input = message.text.strip()
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ "—Å–ø–∏—Å–æ–∫" –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    if user_input.lower() in ["—Å–ø–∏—Å–æ–∫", "—Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤"]:
        entries = get_entries()
        if not entries:
            await message.answer("‚ùå FAQ –ø—É—Å—Ç.")
            return
        text = format_questions(entries)
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="faq_list")
        kb.adjust(1)
        await message.answer(text, reply_markup=kb.as_markup())
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–º –∂–µ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å –≤—ã–±–æ—Ä–∞)
        return

    if not user_input.isdigit():
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.")
        return
    idx = int(user_input)
    entries = get_entries()
    if idx < 1 or idx > len(entries):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.")
        return
    entry = entries[idx - 1]
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (—Å –º–µ–¥–∏–∞, –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–æ)
    if entry['media']:
        file_path = MEDIA_ROOT / entry['media']
        if file_path.exists():
            try:
                ext = file_path.suffix.lower()
                if ext in [".jpg", ".jpeg", ".png", ".gif"]:
                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ GIF
                    if ext == ".gif":
                        await message.answer_animation(FSInputFile(file_path), caption=entry['answer'])
                    else:
                        await message.answer_photo(FSInputFile(file_path), caption=entry['answer'])
                elif ext == ".mp4":
                    await message.answer_video(FSInputFile(file_path), caption=entry['answer'])
                elif ext == ".mp3":
                    await message.answer_audio(FSInputFile(file_path), caption=entry['answer'])
                else:
                    # –ü—Ä–æ—á–∏–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                    await message.answer_document(FSInputFile(file_path), caption=entry['answer'])
            except Exception as e:
                # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                await message.answer(entry['answer'])
        else:
            await message.answer(entry['answer'])
    else:
        await message.answer(entry['answer'])
    # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    kb = InlineKeyboardBuilder()
    kb.button(text="üîÑ –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="faq_list")
    kb.adjust(1)
    await message.answer("‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:", reply_markup=kb.as_markup())
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É)
    await state.clear()

@admin_router.message(Command('add'), lambda m: m.chat.id == ADMIN_CHAT)
async def cmd_add(msg: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add ‚Äì –Ω–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ FAQ."""
    # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞: –∑–∞–ø—É—Å–∫–∞–µ–º FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await state.set_state(AdminStates.adding_question)
    await msg.answer("‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç <b>–≤–æ–ø—Ä–æ—Å–∞</b>:")
@admin_router.message(Command('delete'), lambda m: m.chat.id == ADMIN_CHAT)
async def cmd_delete(msg: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delete ‚Äì –Ω–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ FAQ."""
    entries = get_entries()
    if not entries:
        await msg.answer("‚ùå FAQ –ø—É—Å—Ç.", reply_markup=build_admin_menu())
        # –û—Å—Ç–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        await state.set_state(AdminStates.in_menu)
        return
    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    text = format_questions(entries) + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    await msg.answer(text)
    await state.set_state(AdminStates.deleting_selection)

@admin_router.message(lambda m: m.chat.id == ADMIN_CHAT, StateFilter(None))
async def show_admin_menu(msg: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–Ω–æ–ø–∫–∏) ‚Äì –¥–ª—è –∞–¥–º–∏–Ω–∞ –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    await msg.answer("üõ† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é FAQ:", reply_markup=build_admin_menu())
    await state.set_state(AdminStates.in_menu)

@admin_router.callback_query(lambda c: c.data == "admin_add_faq")
async def admin_add_start(c: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if  c.message.chat.id != ADMIN_CHAT:
        return await c.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    await c.message.edit_text("‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç <b>–≤–æ–ø—Ä–æ—Å–∞</b>:")
    await state.set_state(AdminStates.adding_question)
    await c.answer()

# –ö–Ω–æ–ø–∫–∞ ¬´üóë –£–¥–∞–ª–∏—Ç—å FAQ¬ª ‚Äî —Ç–æ–∂–µ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
@admin_router.callback_query(lambda c: c.data == "admin_del_faq")
async def admin_del_start(c: types.CallbackQuery, state: FSMContext):
    if c.message.chat.id != ADMIN_CHAT:
        return await c.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    entries = get_entries()
    if not entries:
        await c.message.edit_text("‚ùå FAQ –ø—É—Å—Ç.", reply_markup=build_admin_menu())
        return await c.answer()
    text = format_questions(entries) + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    await c.message.edit_text(text)
    await state.set_state(AdminStates.deleting_selection)
    await c.answer()
@admin_router.message(StateFilter(AdminStates.adding_question), lambda m: m.chat.id == ADMIN_CHAT)
async def admin_add_question(msg: types.Message, state: FSMContext):
    """–®–∞–≥ 1 ‚Äì –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –∞–¥–º–∏–Ω–∞."""
    question_text = msg.text.strip()
    if not question_text:
        await msg.answer("‚ùó –í–æ–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(question=question_text)
    await msg.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç <b>–æ—Ç–≤–µ—Ç–∞</b>:")
    await state.set_state(AdminStates.adding_answer)

@admin_router.message(StateFilter(AdminStates.adding_answer), lambda m: m.chat.id == ADMIN_CHAT)
async def admin_add_answer(msg: types.Message, state: FSMContext):
    """–®–∞–≥ 2 ‚Äì –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
    answer_text = msg.text.strip()
    if not answer_text:
        await msg.answer("‚ùó –û—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(answer=answer_text)
    await msg.answer("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª —Å –æ—Ç–≤–µ—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    await state.set_state(AdminStates.adding_media)

@admin_router.message(StateFilter(AdminStates.adding_media), lambda m: m.chat.id == ADMIN_CHAT)
async def admin_add_media(msg: types.Message, state: FSMContext):
    """–®–∞–≥ 3 ‚Äì –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞ (–∏–ª–∏ '–Ω–µ—Ç')."""
    data = await state.get_data()
    media_filename = ""
    # –ï—Å–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ
    if msg.photo:
        file_id = msg.photo[-1].file_id
        file_obj = await bot.get_file(file_id)
        file_bytes = await bot.download_file(file_obj.file_path)
        saved_path = save_media_file(project_id=PROJECT_ID, file_bytes=file_bytes,
                                     original_filename=f"{file_id}.jpg", media_root=MEDIA_DIR)
        media_filename = saved_path.name
    # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç (–ª—é–±–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞)
    elif msg.document:
        file_id = msg.document.file_id
        file_obj = await bot.get_file(file_id)
        file_bytes = await bot.download_file(file_obj.file_path)
        original_name = msg.document.file_name or f"{file_id}"
        saved_path = save_media_file(project_id=PROJECT_ID, file_bytes=file_bytes,
                                     original_filename=original_name, media_root=MEDIA_DIR)
        media_filename = saved_path.name
    # –ï—Å–ª–∏ –≤–∏–¥–µ–æ
    elif msg.video:
        file_id = msg.video.file_id
        file_obj = await bot.get_file(file_id)
        file_bytes = await bot.download_file(file_obj.file_path)
        original_name = msg.video.file_name or f"{file_id}.mp4"
        saved_path = save_media_file(project_id=PROJECT_ID, file_bytes=file_bytes,
                                     original_filename=original_name, media_root=MEDIA_DIR)
        media_filename = saved_path.name
    # –ï—Å–ª–∏ –∞—É–¥–∏–æ
    elif msg.audio:
        file_id = msg.audio.file_id
        file_obj = await bot.get_file(file_id)
        file_bytes = await bot.download_file(file_obj.file_path)
        original_name = msg.audio.file_name or f"{file_id}.mp3"
        saved_path = save_media_file(project_id=PROJECT_ID, file_bytes=file_bytes,
                                     original_filename=original_name, media_root=MEDIA_DIR)
        media_filename = saved_path.name
    # –ï—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è (GIF)
    elif msg.animation:
        file_id = msg.animation.file_id
        file_obj = await bot.get_file(file_id)
        file_bytes = await bot.download_file(file_obj.file_path)
        original_name = msg.animation.file_name or f"{file_id}.gif"
        saved_path = save_media_file(project_id=PROJECT_ID, file_bytes=file_bytes,
                                     original_filename=original_name, media_root=MEDIA_DIR)
        media_filename = saved_path.name
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª —Ç–µ–∫—Å—Ç–æ–º "–Ω–µ—Ç"
    elif msg.text and msg.text.strip().lower() == "–Ω–µ—Ç":
        media_filename = ""
    else:
        # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∏–∫–µ—Ä, –ª–æ–∫–∞—Ü–∏—è –∏ —Ç.–ø.) –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥
        await msg.answer("‚ùó –û–∂–∏–¥–∞–ª—Å—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª –∏–ª–∏ '–Ω–µ—Ç'. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=build_admin_menu())
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å FAQ –≤ –±–∞–∑—É
    question_text = data.get('question')
    answer_text = data.get('answer')
    new_id = add_entry(question_text, answer_text, media_filename)
    if new_id:
        await msg.answer(f"‚úÖ FAQ #{new_id} –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=build_admin_menu())
    else:
        await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å FAQ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=build_admin_menu())
    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
@admin_router.message(StateFilter(AdminStates.deleting_selection), lambda m: m.chat.id == ADMIN_CHAT)
async def admin_delete_select(msg: types.Message, state: FSMContext):
    """–®–∞–≥ 1 —É–¥–∞–ª–µ–Ω–∏—è: –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞."""
    if not msg.text.isdigit():
        await msg.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> –≤–æ–ø—Ä–æ—Å–∞ —Ü–∏—Ñ—Ä–æ–π.")
        return
    idx = int(msg.text.strip())
    entries = get_entries()
    if idx < 1 or idx > len(entries):
        await msg.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å FAQ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    entry = entries[idx - 1]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID (–∏ –∏–º—è –º–µ–¥–∏–∞) —É–¥–∞–ª—è–µ–º–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    await state.update_data(del_id=entry['id'], del_media=entry['media'])
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –î–∞", callback_data="del_confirm")
    kb.button(text="‚ùå –ù–µ—Ç", callback_data="del_cancel")
    kb.adjust(2)
    await msg.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å FAQ #{entry['id']} \"{entry['question']}\"?", reply_markup=kb.as_markup())
    await state.set_state(AdminStates.deleting_confirmation)

@admin_router.callback_query(StateFilter(AdminStates.deleting_confirmation), lambda c: c.data in ["del_confirm", "del_cancel"])
async def admin_delete_confirm(c: types.CallbackQuery, state: FSMContext):
    """–®–∞–≥ 2 —É–¥–∞–ª–µ–Ω–∏—è: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞."""
    data = await state.get_data()
    if c.data == 'del_confirm':
        entry_id = data.get('del_id')
        media_name = data.get('del_media') or ""
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã
        delete_entry(entry_id)
        # –ï—Å–ª–∏ —É FAQ –±—ã–ª–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –º–µ–¥–∏–∞ ‚Äì —É–¥–∞–ª—è–µ–º –∏ —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
        if media_name:
            file_path = MEDIA_ROOT / media_name
            delete_media_file(file_path)
        await c.message.edit_text(f"‚úÖ FAQ #{entry_id} —É–¥–∞–ª—ë–Ω.", reply_markup=build_admin_menu())
    else:
        # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
        await c.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=build_admin_menu())
    await state.clear()
    await c.answer()
@dp.message(StateFilter(None),~Command("start", "help", "list", "add", "delete"))
async def fallback(msg: types.Message, state: FSMContext):
    """–§–æ–ª–ª–±–µ–∫: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if msg.chat.id == ADMIN_CHAT:
        # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await msg.answer("üõ† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é FAQ:", reply_markup=build_admin_menu())
        await state.set_state(AdminStates.in_menu)
    else:
        # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–æ–¥—Å–∫–∞–∑–∫–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è /list
        await msg.answer("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /list –∏–ª–∏ –∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
# –í–∫–ª—é—á–∞–µ–º –Ω–∞—à–∏ routers –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp.include_router(admin_router)
dp.include_router(user_router)

@dp.startup()
async def on_startup():
    # –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏)
    scheduler.start()

async def setup_bot_commands(bot: Bot):
    # –ö–æ–º–∞–Ω–¥—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö)
    user_commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
        BotCommand(command="list", description="–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤")
    ]
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
        BotCommand(command="list", description="–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤"),
        BotCommand(command="add", description="–î–æ–±–∞–≤–∏—Ç—å FAQ-–≤–æ–ø—Ä–æ—Å"),
        BotCommand(command="delete", description="–£–¥–∞–ª–∏—Ç—å FAQ-–≤–æ–ø—Ä–æ—Å")
    ]
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ (–æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
    await bot.set_my_commands(user_commands, scope=BotCommandScopeAllPrivateChats())
    # –û—Ç–¥–µ–ª—å–Ω–æ ‚Äì –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞ (—á—Ç–æ–±—ã –∞–¥–º–∏–Ω –≤–∏–¥–µ–ª –∫–æ–º–∞–Ω–¥—ã /add, /delete)
    try:
        await bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=ADMIN_CHAT))
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è ADMIN_CHAT: {e}")

