import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from pathlib import Path
from dotenv import load_dotenv

from utils.dp import (
    transaction,
    safe_execute,
    get_faq_entries,
    add_faq_entry,
    delete_faq_entry
)
from utils.media import save_media_file

load_dotenv()
BOT_TOKEN = os.getenv("TOKEN")
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

PROJECT_ID = {{ project.id }}
ADMIN_CHAT = {{ project.content.admin_chat_id }}

# ‚Äî FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî
class FAQState(StatesGroup):
    waiting_for_choice = State()

class AdminStates(StatesGroup):
    in_menu                = State()
    adding_question        = State()
    adding_answer          = State()
    adding_media           = State()
    deleting_selection     = State()
    deleting_confirmation  = State()

# ‚Äî –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ –º–µ–Ω—é ‚Äî
def format_questions(entries):
    text = "üìñ FAQ ‚Äî –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n"
    for idx, e in enumerate(entries, start=1):
        text += f"{idx}. {e['question']}\n"
    return text

def build_admin_menu():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å FAQ", callback_data="admin_add_faq"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å FAQ", callback_data="admin_del_faq")
    )
    return kb

# === /help –∏ /adminhelp ===

@dp.message_handler(commands=['help'])
async def user_help(msg: types.Message):
    await msg.answer(
        "‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ /faq –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤¬ª, "
        "—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."
    )

@dp.message_handler(commands=['adminhelp'])
async def admin_help(msg: types.Message):
    if msg.chat.id != ADMIN_CHAT:
        return
    await msg.answer(
        "üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é FAQ:\n"
        "‚Äî ‚ûï –î–æ–±–∞–≤–∏—Ç—å FAQ: –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å/–æ—Ç–≤–µ—Ç/–º–µ–¥–∏–∞\n"
        "‚Äî üóë –£–¥–∞–ª–∏—Ç—å FAQ: —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é."
    )

# === –§–æ–ª–ª–±–µ–∫ ===

@dp.message_handler(state="*")
async def fallback(msg: types.Message):
    if msg.chat.id == ADMIN_CHAT:
        await msg.answer("üõ† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é FAQ:", reply_markup=build_admin_menu())
    else:
        await msg.answer("‚ùì –ù–∞–∂–º–∏—Ç–µ /faq –∏–ª–∏ –∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤¬ª.")

# === –ê–¥–º–∏–Ω-–º–µ–Ω—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ ===

@dp.message_handler(lambda m: m.chat.id==ADMIN_CHAT, content_types=types.ContentTypes.TEXT)
async def show_admin_menu(msg: types.Message):
    await msg.answer("üõ† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é FAQ:", reply_markup=build_admin_menu())
    await AdminStates.in_menu.set()

@dp.callback_query_handler(lambda c: c.data=="admin_cancel", state="*")
async def admin_cancel(c: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await c.message.edit_text("‚ùé –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\nüõ† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é FAQ:", reply_markup=build_admin_menu())
    await c.answer()

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ FAQ ===

@dp.callback_query_handler(lambda c: c.data=="admin_add_faq", state=AdminStates.in_menu)
async def admin_add_start(c: types.CallbackQuery):
    await c.message.edit_text("‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç **–≤–æ–ø—Ä–æ—Å–∞**:")
    await AdminStates.adding_question.set()
    await c.answer()

@dp.message_handler(state=AdminStates.adding_question, lambda m: m.chat.id==ADMIN_CHAT)
async def admin_add_q(msg: types.Message, state: FSMContext):
    await state.update_data(question=msg.text.strip())
    await msg.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç **–æ—Ç–≤–µ—Ç–∞**:")
    await AdminStates.adding_answer.set()

@dp.message_handler(state=AdminStates.adding_answer, lambda m: m.chat.id==ADMIN_CHAT)
async def admin_add_a(msg: types.Message, state: FSMContext):
    await state.update_data(answer=msg.text.strip())
    await msg.answer("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–Ω–µ—Ç¬ª:")
    await AdminStates.adding_media.set()

@dp.message_handler(
    state=AdminStates.adding_media,
    lambda m: m.chat.id==ADMIN_CHAT,
    content_types=types.ContentTypes.ANY
)
async def admin_add_m(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    media = ""
    if msg.content_type == 'photo':
        file_id = msg.photo[-1].file_id
        file_obj = await bot.get_file(file_id)
        data_bytes = await bot.download_file(file_obj.file_path)
        path = save_media_file(
            project_id=PROJECT_ID,
            file_bytes=data_bytes,
            original_filename=f"{file_id}.jpg",
            media_root=Path(__file__).parent.parent / "media"
        )
        media = path.name
    elif msg.content_type == 'document':
        file_id = msg.document.file_id
        file_obj = await bot.get_file(file_id)
        data_bytes = await bot.download_file(file_obj.file_path)
        path = save_media_file(
            project_id=PROJECT_ID,
            file_bytes=data_bytes,
            original_filename=msg.document.file_name,
            media_root=Path(__file__).parent.parent / "media"
        )
        media = path.name
    elif msg.text.strip().lower() != '–Ω–µ—Ç':
        await msg.answer("‚ùó –û–∂–∏–¥–∞–ª—Å—è —Ñ–∞–π–ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª. –û—Ç–º–µ–Ω–∞.")
        return await state.finish()

    eid = add_entry(data['question'], data['answer'], media)
    await msg.answer(f"‚úÖ FAQ #{eid} –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=build_admin_menu())
    await state.finish()

# === –£–¥–∞–ª–µ–Ω–∏–µ FAQ ===

@dp.callback_query_handler(lambda c: c.data=="admin_del_faq", state=AdminStates.in_menu)
async def admin_del_list(c: types.CallbackQuery):
    entries = get_entries()
    if not entries:
        await c.message.edit_text("‚ùå FAQ –ø—É—Å—Ç.", reply_markup=build_admin_menu())
        return await c.answer()
    text = format_questions(entries) + "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    await c.message.edit_text(text)
    await AdminStates.deleting_selection.set()
    await c.answer()

@dp.message_handler(state=AdminStates.deleting_selection, lambda m: m.chat.id==ADMIN_CHAT)
async def admin_del_select(msg: types.Message, state: FSMContext):
    if not msg.text.isdigit():
        return await msg.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    idx = int(msg.text.strip())
    entries = get_entries()
    if idx<1 or idx>len(entries):
        return await msg.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    e = entries[idx-1]
    await state.update_data(del_id=e['id'])
    kb = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="del_confirm"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="del_cancel")
    )
    await msg.answer(f"–£–¥–∞–ª–∏—Ç—å FAQ #{e['id']} ¬´{e['question']}¬ª?", reply_markup=kb)
    await AdminStates.deleting_confirmation.set()

@dp.callback_query_handler(
    lambda c: c.data in ['del_confirm','del_cancel'],
    state=AdminStates.deleting_confirmation
)
async def admin_del_confirm(c: types.CallbackQuery, state: FSMContext):
    if c.data=='del_confirm':
        eid = (await state.get_data())['del_id']
        delete_entry(eid)
        await c.message.edit_text(f"‚úÖ FAQ #{eid} —É–¥–∞–ª—ë–Ω.", reply_markup=build_admin_menu())
    else:
        await c.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=build_admin_menu())
    await state.finish()
    await c.answer()

# === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º ===

@dp.message_handler(lambda m: m.chat.id != ADMIN_CHAT, commands=['faq'])
async def cmd_faq(message: types.Message):
    entries = get_entries()
    if not entries:
        return await message.answer("‚ùå –í FAQ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
    text = format_questions(entries)
    kb = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üîÑ –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="faq_list")
    )
    await message.answer(text, reply_markup=kb)
    await FAQState.waiting_for_choice.set()

@dp.callback_query_handler(lambda c: c.data=="faq_list", state="*")
async def faq_list(c: types.CallbackQuery):
    entries = get_entries()
    if not entries:
        return await c.answer("‚ùå FAQ –ø—É—Å—Ç.", show_alert=True)
    text = format_questions(entries)
    kb = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üîÑ –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="faq_list")
    )
    await c.message.edit_text(text, reply_markup=kb)
    await c.answer()

@dp.message_handler(lambda m: m.chat.id != ADMIN_CHAT, state=FAQState.waiting_for_choice)
async def process_choice(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text.lower() in ['—Å–ø–∏—Å–æ–∫','—Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤']:
        return await faq_list(types.CallbackQuery(
            id=None, from_user=message.from_user, data="faq_list", message=message))
    if not text.isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.")
    idx = int(text)
    entries = get_entries()
    if idx<1 or idx>len(entries):
        return await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    e = entries[idx-1]
    if e['media']:
        path = Path(__file__).parent.parent / "media" / str(PROJECT_ID) / e['media']
        if path.exists():
            await bot.send_photo(message.chat.id, open(path,'rb'), caption=e['answer'])
        else:
            await message.answer(e['answer'])
    else:
        await message.answer(e['answer'])
    kb = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üîÑ –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="faq_list")
    )
    await message.answer("–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.", reply_markup=kb)
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
{% endraw %}
