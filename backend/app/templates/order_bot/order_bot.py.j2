{# --------------------------------------------------------------------
   Order-Bot (aiogram-3) — файл-шаблон
   После генерации подставляются переменные:
       {{ project_id }}    – числовой ID проекта (коллекция в БД)
       {{ admin_chat_id }} – id группы, где доступна админ-панель
-------------------------------------------------------------------- #}
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from utils.media import save_media_file
import logging
import os
import tempfile
from pathlib import Path
from html import escape
from utils.collage import generate_collage
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import (
    BotCommand, BotCommandScopeDefault, BotCommandScopeAllPrivateChats,
    BotCommandScopeAllGroupChats, BotCommandScopeChat, FSInputFile
)

# ─────────────────────────── конфигурация ────────────────────────────
load_dotenv()
BOT_TOKEN = os.getenv("TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Переменная TOKEN не задана")

PROJECT_ID = {{ project_id }}
ADMIN_CHAT = {{ admin_chat_id }}

# ──────────────────────── подключаем БД-модуль ───────────────────────
# utils/order_dp.py должен лежать рядом с utils/order_bot.db
from utils import order_db as db          # ← новый import
db.init_db()
# ────────────────────────── инициализация ─────────────────────────────
bot = Bot(token=BOT_TOKEN,
          default=DefaultBotProperties(parse_mode="HTML"))
dp  = Dispatcher(storage=MemoryStorage())

MEDIA_ROOT = Path(__file__).resolve().parent / "media" / str(PROJECT_ID)

# ─── Определение состояний FSM ────────────────────────────────────────────────
class CatalogState(StatesGroup):
    page = State()  # текущее отображаемое меню страницы каталога

class CartState(StatesGroup):
    checkout_address = State()   # ожидание ввода адреса
    checkout_media   = State()   # ожидание медиа-файла или отказа
    checkout_confirm = State()   # ожидание подтверждения заказа

class ProductAdminState(StatesGroup):
    name        = State()  # ввод названия товара
    short_desc  = State()  # ввод краткого описания
    full_desc   = State()  # ввод полного описания
    waiting_img = State()  # ожидание изображения товара

class DeleteProductState(StatesGroup):
    selecting_page    = State()  # выбор страницы каталога для удаления
    confirming_delete = State()  # подтверждение удаления товара

# ─── Команды /debug и /chatid (для отладки) ───────────────────────────────────

@dp.message(Command("chatid"))
async def cmd_chatid(msg: types.Message):
    """Отправляет ID текущего чата (для помощи в получении ADMIN_CHAT_ID)."""
    await msg.answer(f"Этот чат имеет ID: `{msg.chat.id}`", parse_mode="Markdown")

# ─── Каталог товаров ─────────────────────────────────────────────────────────
@dp.message(Command("start", "catalog"))
async def cmd_catalog(message: types.Message, state: FSMContext):

    """Обрабатывает команду /start или /catalog – показывает первую страницу каталога."""
    # Проверяем, не заблокирован ли пользователь
    if db.is_banned(PROJECT_ID, message.from_user.id):
        return await message.answer("❌ Вы заблокированы.")
    # Устанавливаем номер страницы каталога на 1 и отправляем первую страницу
    await state.update_data(page=1)
    await send_catalog_page(message.chat.id, state)

@dp.callback_query(lambda c: c.data in {"prev", "next"}, StateFilter(CatalogState.page))
async def catalog_nav(cb: types.CallbackQuery, state: FSMContext):
    """Листает страницы каталога (назад/вперед) по нажатиям inline-кнопок."""
    data = await state.get_data()
    page = data.get("page", 1)
    products = db.get_products_list(PROJECT_ID)

    # Изменяем номер страницы в зависимости от нажатой кнопки
    if cb.data == "prev" and page > 1:
        page -= 1
    elif cb.data == "next" and page * 9 < len(products):
        page += 1

    await state.update_data(page=page)
    await send_catalog_page(cb.message.chat.id, state)
    await cb.answer()  # убираем "часики" на кнопке

async def send_catalog_page(chat_id: int, state: FSMContext):
    """Отправляет изображение-коллаж с текущей страницей каталога и кнопки навигации."""
    page = (await state.get_data()).get("page", 1)
    products = db.get_products_list(PROJECT_ID)
    # Получаем срез товаров для данной страницы (по 9 на страницу)
    slice_ = products[(page - 1) * 9 : page * 9]

    # Генерируем коллаж из изображений товаров текущей страницы во временный файл
    collage_path = Path(tempfile.gettempdir()) / f"catalog_{page}.jpg"
    generate_collage([str(MEDIA_ROOT / p["media"]) for p in slice_ if p["media"]], collage_path)

    # Создаём inline-клавиатуру: кнопки с номерами товаров и стрелки навигации
    kb = InlineKeyboardBuilder()
    for idx in range(1, len(slice_) + 1):
        kb.button(text=str(idx), callback_data=f"sel_{idx}")
    if page > 1:
        kb.button(text="◀️", callback_data="prev")
    if page * 9 < len(products):
        kb.button(text="▶️", callback_data="next")
    kb.adjust(3)  # расположение: номера товаров по 3 в ряд, навигация на новой строке

    # Отправляем фотографию-коллаж с подписью и inline-кнопками
    await bot.send_photo(chat_id, FSInputFile(collage_path), caption=f"Страница {page}", reply_markup=kb.as_markup())
    # Устанавливаем состояние FSM каталога (находится на странице каталога)
    await state.set_state(CatalogState.page)

@dp.callback_query(lambda c: c.data.startswith("sel_"), StateFilter(CatalogState.page))
async def on_select_product(cb: types.CallbackQuery, state: FSMContext):
    idx = int(cb.data.split("_")[1]) - 1
    page = (await state.get_data())["page"]
    products = db.get_products_list(PROJECT_ID)
    gidx = (page - 1) * 9 + idx
    if gidx >= len(products):
        return await cb.answer("Неверный выбор", show_alert=True)

    product = products[gidx]
    caption = (
        f"<b>{escape(product['name'])}</b>\n\n"
        f"{escape(product['short_desc'])}\n\n"
        f"{escape(product['full_desc'])}"
    )
    chat_id = cb.message.chat.id          # ← правильный получатель

    if product["media"]:
        await bot.send_photo(chat_id, FSInputFile(MEDIA_ROOT / product["media"]), caption=caption)
    else:
        await bot.send_message(chat_id, caption)

    # Инлайн-клавиатура
    kb = InlineKeyboardBuilder()
    if chat_id != ADMIN_CHAT:             # в каталоге админ-группы корзина не нужна
        kb.button(text="➕ В корзину", callback_data=f"add_{product['id']}")
    kb.button(text="← Назад", callback_data="back")
    kb.adjust(1)
    await bot.send_message(chat_id, "Что дальше?", reply_markup=kb.as_markup())
    await cb.answer()


@dp.callback_query(lambda c: c.data == "back", StateFilter(CatalogState.page))
async def back_to_catalog(cb: types.CallbackQuery, state: FSMContext):
    """Возврат к текущей странице каталога (после просмотра товара)."""
    await send_catalog_page(cb.message.chat.id, state)
    await cb.answer()

# ─── Корзина ────────────────────────────────────────────────────────────────
@dp.callback_query(lambda c: c.data.startswith("add_"))
async def add_to_cart(cb: types.CallbackQuery):
    """Добавляет выбранный товар в корзину (обработка нажатия '➕ В корзину')."""
    product_id = int(cb.data.split("_")[1])
    db.add_to_cart(PROJECT_ID, cb.message.chat.id, product_id)
    # Клавиатура: перейти в корзину или обратно в каталог
    kb = InlineKeyboardBuilder()
    kb.button(text="🛒 Корзина", callback_data="view_cart")
    kb.button(text="← Каталог",  callback_data="back")
    kb.adjust(1)
    # Короткое уведомление о добавлении (всплывающее)
    await cb.answer("✅ Товар добавлен")
    # Дополнительно отправляем сообщение с вариантами действий
    await bot.send_message(cb.message.chat.id, "Что дальше?", reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data == "view_cart")
async def view_cart(cb: types.CallbackQuery):
    """Показывает содержимое корзины."""
    await show_cart(cb.message.chat.id, cb.message)

@dp.callback_query(lambda c: c.data.startswith(("dec_", "inc_", "del_")))
async def edit_cart(cb: types.CallbackQuery):
    """Обрабатывает изменение количества товаров или удаление из корзины."""
    action, cart_id_str = cb.data.split("_")
    cart_id = int(cart_id_str)
    items = db.get_cart_items(PROJECT_ID, cb.message.chat.id)
    item = next((i for i in items if i["cart_id"] == cart_id), None)
    if not item:
        return await cb.answer("❌ Не найдено", show_alert=True)

    # Уменьшение, увеличение или удаление позиции
    if action == "del":
        db.delete_cart_item(cart_id)
    else:
        new_qty = item["quantity"] + (1 if action == "inc" else -1)
        db.update_cart_item(cart_id, new_qty)
    await show_cart(cb.message.chat.id, cb.message)
    await cb.answer()  # убираем индикатор загрузки

async def show_cart(user_id: int, msg: types.Message | None = None):
    """Отображает текущее содержимое корзины пользователя с кнопками управления."""
    items = db.get_cart_items(PROJECT_ID, user_id)
    if not items:
        # Корзина пуста
        text = "🛒 Корзина пуста."
        kb = InlineKeyboardBuilder()
        kb.button(text="← Каталог", callback_data="back")
        kb.adjust(1)
        if msg:
            await msg.edit_text(text, reply_markup=kb.as_markup())
        else:
            await bot.send_message(user_id, text, reply_markup=kb.as_markup())
        return

    # Формируем список позиций в тексте
    lines = ["<b>Ваши товары:</b>"]
    kb = InlineKeyboardBuilder()
    for it in items:
        lines.append(f"{escape(it['name'])} — {it['quantity']} шт.")
        cid = it["cart_id"]
        # Кнопки "-" "+" "❌" для каждой позиции
        kb.button(text="➖", callback_data=f"dec_{cid}")
        kb.button(text="➕", callback_data=f"inc_{cid}")
        kb.button(text="❌", callback_data=f"del_{cid}")
    # Кнопки оформления заказа и возврата в каталог
    kb.button(text="✅ Оформить", callback_data="checkout")
    kb.button(text="← Каталог",   callback_data="back")
    # Располагаем: по 3 кнопки (управление) в ряд для каждой позиции, затем отдельные ряды для оформления и возврата
    kb.adjust(3, 3, 1, 1)
    # Обновляем сообщение о корзине (или отправляем новое)
    if msg:
        await msg.edit_text("\n".join(lines), reply_markup=kb.as_markup())
    else:
        await bot.send_message(user_id, "\n".join(lines), reply_markup=kb.as_markup())

# ─── Оформление заказа ──────────────────────────────────────────────────────
@dp.callback_query(lambda c: c.data == "checkout")
async def checkout(cb: types.CallbackQuery, state: FSMContext):
    """Начинает оформление заказа: запрашивает адрес доставки."""
    # Заменяем текст сообщения корзины на приглашение ввести адрес
    await cb.message.edit_text("Введите адрес доставки:")
    await state.set_state(CartState.checkout_address)
    await cb.answer()

@dp.message(StateFilter(CartState.checkout_address))
async def checkout_address(m: types.Message, state: FSMContext):
    # Сохраняем адрес
    await state.update_data(address=m.text.strip())

    # Сразу предлагаем подтвердить заказ
    kb = InlineKeyboardBuilder()
    kb.button(text="✅ Подтвердить", callback_data="confirm")
    kb.button(text="❌ Отменить",    callback_data="cancel")
    kb.adjust(2)

    await m.answer("<b>Подтвердите заказ</b>", reply_markup=kb.as_markup())
    await state.set_state(CartState.checkout_confirm)



@dp.callback_query(lambda c: c.data == "confirm", StateFilter(CartState.checkout_confirm))
async def confirm_order(cb: types.CallbackQuery, state: FSMContext):
    """Обрабатывает подтверждение заказа пользователем."""
    data = await state.get_data()
    user_id = cb.from_user.id
    address = data.get("address", "")
    media_file = data.get("media", "")  # имя сохранённого файла (может быть пустой)

    # Получаем текущее содержимое корзины пользователя и сохраняем каждую позицию как заказ
    items = db.get_cart_items(PROJECT_ID, user_id)
    for it in items:
        order = {
            "project_id": PROJECT_ID,
            "user_id":    user_id,
            "product":    it["product_id"],
            "quantity":   it["quantity"],
            "address":    address,
            "media_path": media_file
        }
        db.save_order(order)
    db.clear_cart(PROJECT_ID, user_id)  # очищаем корзину пользователя

    # Уведомляем пользователя об успешном оформлении
    await cb.message.edit_text("✅ Заказ оформлен!")
    # Сброс состояния FSM
    await state.clear()

    # Отправляем уведомление в админ-группу о новом заказе
    try:
        user = cb.from_user
        # Формируем сообщение с информацией о заказе
        order_lines = [f"<b>Новый заказ от</b> <a href=\"tg://user?id={user.id}\">{escape(user.first_name)}</a>:"]
        for it in items:
            order_lines.append(f"{escape(it['name'])} — {it['quantity']} шт.")
        order_lines.append(f"<b>Адрес:</b> {escape(address)}")
        if media_file:
            order_lines.append("(К заказу приложен файл ниже)")
        admin_message = "\n".join(order_lines)
        # Отправляем текстовое сообщение с деталями заказа
        await bot.send_message(ADMIN_CHAT, admin_message)
        # Если есть вложенный файл от пользователя, отправляем его в группу
        if media_file:
            file_path = MEDIA_ROOT / media_file
            ext = file_path.suffix.lower()
            # Определяем тип медиа и используем соответствующий метод отправки
            if ext in {".jpg", ".jpeg", ".png", ".gif"}:
                if ext == ".gif":
                    await bot.send_animation(ADMIN_CHAT, FSInputFile(file_path))
                else:
                    await bot.send_photo(ADMIN_CHAT, FSInputFile(file_path))
            elif ext == ".mp4":
                await bot.send_video(ADMIN_CHAT, FSInputFile(file_path))
            elif ext == ".mp3":
                await bot.send_audio(ADMIN_CHAT, FSInputFile(file_path))
            else:
                await bot.send_document(ADMIN_CHAT, FSInputFile(file_path))
    except Exception as err:
        # Логируем ошибку отправки уведомления (если бот не имеет прав писать в группу и т.п.)
        print(f"[WARN] Не удалось отправить уведомление в админ-группу: {err}")

@dp.callback_query(lambda c: c.data == "cancel", StateFilter(CartState.checkout_confirm))
async def cancel_order(cb: types.CallbackQuery, state: FSMContext):
    """Отмена процесса оформления заказа."""
    await cb.message.edit_text("❌ Оформление отменено.")
    await state.clear()

# ─── Админ-панель: добавление товара ─────────────────────────────────────────
@dp.message(Command("addproduct"))
async def adm_add_product(message: types.Message, state: FSMContext):
    """Начинает диалог добавления нового товара (только в ADMIN_CHAT)."""
    if message.chat.id != ADMIN_CHAT:
        return  # игнорируем команду, если она не из админской группы
    await message.answer("Название товара:")
    await state.set_state(ProductAdminState.name)

@dp.message(StateFilter(ProductAdminState.name))
async def adm_enter_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("Краткое описание:")
    await state.set_state(ProductAdminState.short_desc)

@dp.message(StateFilter(ProductAdminState.short_desc))
async def adm_enter_short_desc(message: types.Message, state: FSMContext):
    await state.update_data(short_desc=message.text.strip())
    await message.answer("Полное описание:")
    await state.set_state(ProductAdminState.full_desc)

@dp.message(StateFilter(ProductAdminState.full_desc))
async def adm_enter_full_desc(message: types.Message, state: FSMContext):
    await state.update_data(full_desc=message.text.strip())
    await message.answer("Пришлите картинку для товара (или напишите «нет»):")
    await state.set_state(ProductAdminState.waiting_img)

@dp.message(Command("ban"))
async def cmd_ban(message: types.Message):
    if message.chat.id != ADMIN_CHAT:
        return
    # ожидаем: /ban <user_id>
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.reply("Использование: /ban <user_id>")
    target_id = int(parts[1])
    db.ban_user(PROJECT_ID, target_id)
    await message.reply(f"❌ Пользователь {target_id} заблокирован.")

@dp.message(Command("unban"))
async def cmd_unban(message: types.Message):
    if message.chat.id != ADMIN_CHAT:
        return
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.reply("Использование: /unban <user_id>")
    target_id = int(parts[1])
    db.unban_user(PROJECT_ID, target_id)
    await message.reply(f"✅ Пользователь {target_id} разблокирован.")

@dp.message(StateFilter(ProductAdminState.waiting_img))
async def adm_enter_image(message: types.Message, state: FSMContext):
    data = await state.get_data()
    media_filename = ""
    if message.text and message.text.lower() == "нет":
        media_filename = ""
    else:
        file = None
        orig_name = ""
        # Определяем тип полученного медиа-файла
        if message.photo:
            file = message.photo[-1]
            orig_name = "product.jpg"
        elif message.video:
            file = message.video
            orig_name = message.video.file_name or "product.mp4"
        elif message.document:
            file = message.document
            orig_name = message.document.file_name or f"file{Path(file.file_id).suffix or ''}"
        elif message.audio:
            file = message.audio
            orig_name = message.audio.file_name or "product.mp3"
        if file:
            file_bytes = await bot.download(file)
            try:
                saved_path = save_media_file(PROJECT_ID, file_bytes.getvalue(), orig_name)
                media_filename = saved_path.name
            except ValueError as e:
                await message.answer(f"⚠️ Файл не сохранён: {e}\nТовар будет добавлен без изображения.")
                media_filename = ""
        else:
            media_filename = ""
    # Добавляем товар в базу данных
    db.add_product(PROJECT_ID, data["name"], data["short_desc"], data["full_desc"], media_filename)
    await message.answer("✅ Товар успешно добавлен.")
    await state.clear()

# ─── Админ-панель: удаление товара ───────────────────────────────────────────
@dp.message(Command("delproduct"))
async def adm_delete_product_start(message: types.Message, state: FSMContext):
    """Начинает процесс удаления товара: показывает каталог товаров с номерами для удаления."""
    if message.chat.id != ADMIN_CHAT:
        return
    await state.update_data(del_page=1)
    await send_delete_page(message.chat.id, state)

@dp.callback_query(lambda c: c.data in {"dprev", "dnext"}, StateFilter(DeleteProductState.selecting_page))
async def adm_delete_nav(cb: types.CallbackQuery, state: FSMContext):
    """Листает страницы каталога при удалении товара (в админ-панели)."""
    data = await state.get_data()
    page = data.get("del_page", 1)
    products = db.get_products_list(PROJECT_ID)
    if cb.data == "dprev" and page > 1:
        page -= 1
    elif cb.data == "dnext" and page * 9 < len(products):
        page += 1
    await state.update_data(del_page=page)
    await send_delete_page(cb.message.chat.id, state)
    await cb.answer()

async def send_delete_page(chat_id: int, state: FSMContext):
    """Отправляет страницу каталога товаров с пронумерованными позициями для удаления."""
    page = (await state.get_data()).get("del_page", 1)
    products = db.get_products_list(PROJECT_ID)
    slice_ = products[(page - 1) * 9 : page * 9]

    # Генерируем коллаж для страницы удаляемых товаров
    collage_path = Path(tempfile.gettempdir()) / f"delete_{page}.jpg"
    generate_collage([str(MEDIA_ROOT / p["media"]) for p in slice_ if p["media"]], collage_path)

    kb = InlineKeyboardBuilder()
    for idx, _ in enumerate(slice_, start=1):
        kb.button(text=str(idx), callback_data=f"dsel_{idx}")
    if page > 1:
        kb.button(text="◀️", callback_data="dprev")
    if page * 9 < len(products):
        kb.button(text="▶️", callback_data="dnext")
    kb.adjust(3)
    await bot.send_photo(chat_id, FSInputFile(collage_path),
                         caption="Выберите товар для удаления:", reply_markup=kb.as_markup())
    await state.set_state(DeleteProductState.selecting_page)

@dp.callback_query(lambda c: c.data.startswith("dsel_"), StateFilter(DeleteProductState.selecting_page))
async def adm_select_delete(cb: types.CallbackQuery, state: FSMContext):
    """Фиксирует выбор товара для удаления и просит подтверждение/отмену."""
    idx = int(cb.data.split("_")[1]) - 1
    page = (await state.get_data())["del_page"]
    products = db.get_products_list(PROJECT_ID)
    global_idx = (page - 1) * 9 + idx
    if global_idx >= len(products):
        return await cb.answer("Неверно", show_alert=True)
    product_id = products[global_idx]["id"]
    await state.update_data(del_id=product_id)
    # Запрашиваем подтверждение удаления
    kb = InlineKeyboardBuilder()
    kb.button(text="✅ Удалить", callback_data="dconfirm")
    kb.button(text="❌ Отмена",  callback_data="dcancel")
    kb.adjust(2)
    await cb.message.edit_caption(f"Выбран товар #{product_id}. Подтвердите удаление.", reply_markup=kb.as_markup())
    await state.set_state(DeleteProductState.confirming_delete)
    await cb.answer()

@dp.callback_query(lambda c: c.data == "dconfirm", StateFilter(DeleteProductState.confirming_delete))
async def adm_delete_confirm(cb: types.CallbackQuery, state: FSMContext):
    """Удаляет товар из базы (после подтверждения админом)."""
    data = await state.get_data()
    product_id = data.get("del_id")
    # Удаляем товар из базы данных
    db.delete_product(PROJECT_ID, product_id)
    await cb.message.edit_caption(f"✅ Товар #{product_id} удалён.", reply_markup=None)
    await state.clear()

@dp.callback_query(lambda c: c.data == "dcancel", StateFilter(DeleteProductState.confirming_delete))
async def adm_delete_cancel(cb: types.CallbackQuery, state: FSMContext):
    """Отмена удаления товара."""
    await cb.message.edit_caption("❌ Удаление отменено.", reply_markup=None)
    await state.clear()
# ─── Регистрация команд бота ────────────────────────────────────────────────
# планировщик, чтобы потом можно было добавлять задачи в Admin-панели
from apscheduler.schedulers.asyncio import AsyncIOScheduler
scheduler = AsyncIOScheduler()
@dp.startup()
async def on_startup():
    scheduler.start()

# ─── Регистрация команд бота ────────────────────────────────────────────────
async def setup_bot_commands(bot: Bot):
    # 1) Общие команды (видны везде, если нет более узкого scope)
    default_cmds = [
        BotCommand(command="start",      description="Показать каталог товаров"),
    ]
    await bot.set_my_commands(
        default_cmds,
        scope=BotCommandScopeDefault(),
        language_code="ru"
    )

    # 2) Личные чаты — дублируем
    await bot.set_my_commands(
        default_cmds,
        scope=BotCommandScopeAllPrivateChats(),
        language_code="ru"
    )

    # 3) Все групповые чаты — тоже дублируем
    await bot.set_my_commands(
        default_cmds,
        scope=BotCommandScopeAllGroupChats(),
        language_code="ru"
    )

    # 4) Админ-группа — объединяем обычные и админские команды
    admin_cmds = [
        BotCommand(command="addproduct", description="Добавить товар (админ)"),
        BotCommand(command="delproduct", description="Удалить товар (админ)"),
        BotCommand(command="ban",        description="Заблокировать пользователя"),
        BotCommand(command="unban",      description="Разблокировать пользователя"),
    ]
    await bot.set_my_commands(
        default_cmds + admin_cmds,
        scope=BotCommandScopeChat(chat_id=ADMIN_CHAT),
        language_code="ru"
    )

