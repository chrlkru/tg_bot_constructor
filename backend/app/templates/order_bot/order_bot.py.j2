{% raw %}
# templates/order_bot/bot.py

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from pathlib import Path

from utils.collage import generate_collage
from utils.media import save_media_file
from app.database import (
    get_products_list, add_to_cart, get_cart_items, update_cart_item,
    delete_cart_item, clear_cart, save_order,
    add_product, delete_product, ban_user, is_banned
)

# --- –ö–æ–Ω—Ñ–∏–≥ ---
bot = Bot(token="{{ project.token }}")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

PROJECT_ID = {{ project.id }}
ADMIN_CHAT = {{ project.content.admin_chat_id }}

# --- FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class CatalogState(StatesGroup):
    page = State()

class CartState(StatesGroup):
    viewing = State()
    checkout_address = State()
    checkout_media = State()
    checkout_confirm = State()

class ProductAdminState(StatesGroup):
    name = State()
    short_desc = State()
    full_desc = State()
    waiting_img = State()

class DeleteProductState(StatesGroup):
    selecting_page = State()
    confirming_delete = State()

# --- –ö–ê–¢–ê–õ–û–ì ---

@dp.message_handler(commands=['catalog','start'])
async def cmd_catalog(msg: types.Message, state: FSMContext):
    if is_banned(PROJECT_ID, msg.from_user.id):
        return await msg.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
    await state.update_data(page=1)
    await send_catalog_page(msg.chat.id, state)

async def send_catalog_page(chat_id, state: FSMContext):
    data = await state.get_data()
    page = data.get('page', 1)
    prods = get_products_list(PROJECT_ID)
    slice = prods[(page-1)*9 : page*9]

    img_paths = []
    for p in slice:
        media = p["media"]
        if media:
            path = Path(__file__).parent.parent / "media" / str(PROJECT_ID) / media
            img_paths.append(str(path))

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–ª–ª–∞–∂ —É—Ç–∏–ª–∏—Ç–æ–π
    collage = generate_collage(img_paths, f"/tmp/collage_{page}.jpg")

    kb = types.InlineKeyboardMarkup(row_width=3)
    for i, p in enumerate(slice, start=1):
        kb.insert(types.InlineKeyboardButton(str(i), callback_data=f"select_{i}"))
    if page > 1:
        kb.insert(types.InlineKeyboardButton("‚Üê", callback_data="prev"))
    if page * 9 < len(prods):
        kb.insert(types.InlineKeyboardButton("‚Üí", callback_data="next"))

    await bot.send_photo(chat_id, collage, caption=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}", reply_markup=kb)
    await CatalogState.page.set()

@dp.callback_query_handler(lambda c: c.data in ['prev','next'], state=CatalogState.page)
async def on_nav(c: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    page = data.get('page', 1)
    prods = get_products_list(PROJECT_ID)
    if c.data == 'prev' and page > 1:
        page -= 1
    if c.data == 'next' and page * 9 < len(prods):
        page += 1
    await state.update_data(page=page)
    await send_catalog_page(c.from_user.id, state)
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("select_"), state=CatalogState.page)
async def on_select(c: types.CallbackQuery, state: FSMContext):
    idx = int(c.data.split("_")[1]) - 1
    data = await state.get_data()
    page = data['page']
    prods = get_products_list(PROJECT_ID)
    global_idx = (page-1)*9 + idx
    if global_idx >= len(prods):
        return await c.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
    p = prods[global_idx]
    media = p["media"]
    if media:
        path = Path(__file__).parent.parent / "media" / str(PROJECT_ID) / media
        await bot.send_photo(
            c.from_user.id,
            path.open('rb'),
            caption=f"{p['name']}\n\n{p['full_desc']}"
        )
    else:
        await bot.send_message(
            c.from_user.id,
            f"{p['name']}\n\n{p['full_desc']}"
        )
    kb = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("‚ûï –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"addcart_{p['id']}"),
        types.InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥",    callback_data="back")
    )
    await bot.send_message(c.from_user.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb)
    await c.answer()

@dp.callback_query_handler(lambda c: c.data=="back", state="*")
async def on_back(c: types.CallbackQuery, state: FSMContext):
    await send_catalog_page(c.from_user.id, state)
    await c.answer()

# --- –ö–û–†–ó–ò–ù–ê ---

@dp.callback_query_handler(lambda c: c.data.startswith("addcart_"))
async def on_addcart(c: types.CallbackQuery):
    pid = int(c.data.split("_")[1])
    add_to_cart(PROJECT_ID, c.from_user.id, pid)
    kb = types.InlineKeyboardMarkup(row_width=2).add(
        types.InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart"),
        types.InlineKeyboardButton("‚Üê –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="back")
    )
    await c.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
    await bot.send_message(c.from_user.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data=="view_cart")
async def on_view_cart(c: types.CallbackQuery, state: FSMContext):
    items = get_cart_items(PROJECT_ID, c.from_user.id)
    if not items:
        kb = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("‚Üê –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="back")
        )
        await bot.send_message(c.from_user.id, "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=kb)
        return
    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    total = 0
    for it in items:
        qty = it['quantity']
        price = getattr(it, 'price', 0)
        subtotal = price * qty
        total += subtotal
        text += f"{it['cart_id']}) {it['name']} √ó {qty} ‚Äî {subtotal}‚ÇΩ\n"
    text += f"\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    kb = types.InlineKeyboardMarkup(row_width=4)
    for it in items:
        cid = it['cart_id']
        kb.insert(types.InlineKeyboardButton(f"‚ûñ{cid}", callback_data=f"dec_{cid}"))
        kb.insert(types.InlineKeyboardButton(f"‚ûï{cid}", callback_data=f"inc_{cid}"))
        kb.insert(types.InlineKeyboardButton(f"üóë{cid}", callback_data=f"delcart_{cid}"))
    kb.add(
        types.InlineKeyboardButton("üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"),
        types.InlineKeyboardButton("‚Üê –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="back")
    )
    await bot.send_message(c.from_user.id, text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith(("dec_","inc_","delcart_")))
async def on_edit_cart(c: types.CallbackQuery):
    action, cid = c.data.split("_")
    cid = int(cid)
    items = get_cart_items(PROJECT_ID, c.from_user.id)
    if action == "dec":
        q = next(it['quantity'] for it in items if it['cart_id']==cid)
        update_cart_item(cid, q-1)
    elif action == "inc":
        q = next(it['quantity'] for it in items if it['cart_id']==cid)
        update_cart_item(cid, q+1)
    else:
        delete_cart_item(cid)
    await on_view_cart(c, None)
    await c.answer()

@dp.callback_query_handler(lambda c: c.data=="checkout")
async def on_checkout(c: types.CallbackQuery, state: FSMContext):
    await bot.send_message(c.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await CartState.checkout_address.set()
    await c.answer()

@dp.message_handler(state=CartState.checkout_address)
async def handle_address(msg: types.Message, state: FSMContext):
    await state.update_data(address=msg.text)
    await msg.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª:")
    await CartState.checkout_media.set()

@dp.message_handler(
    state=CartState.checkout_media,
    content_types=types.ContentTypes.ANY
)
async def handle_checkout_media(msg: types.Message, state: FSMContext):
    media = None
    if msg.content_type in ['photo','document']:
        if msg.content_type == 'photo':
            file_id = msg.photo[-1].file_id
            orig_name = f"{file_id}.jpg"
            file_obj = await bot.get_file(file_id)  # type: ignore
            data_bytes = await bot.download_file(file_obj.file_path)  # type: ignore
        else:
            file_id = msg.document.file_id
            orig_name = msg.document.file_name
            file_obj = await bot.get_file(file_id)  # type: ignore
            data_bytes = await bot.download_file(file_obj.file_path)  # type: ignore
        path = save_media_file(
            project_id=PROJECT_ID,
            file_bytes=data_bytes,
            original_filename=orig_name,
            media_root=Path(__file__).parent.parent / "media"
        )
        media = path.name
    await state.update_data(media=media)
    data = await state.get_data()
    items = get_cart_items(PROJECT_ID, msg.from_user.id)
    text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n"
    total = 0
    for it in items:
        qty = it['quantity']
        price = getattr(it, 'price', 0)
        subtotal = price * qty
        total += subtotal
        text += f"{it['name']} √ó {qty} ‚Äî {subtotal}‚ÇΩ\n"
    text += f"\n–ê–¥—Ä–µ—Å: {data['address']}\n–ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    kb = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",    callback_data="cancel_order")
    )
    await msg.answer(text, reply_markup=kb)
    await CartState.checkout_confirm.set()

@dp.callback_query_handler(
    lambda c: c.data in ["confirm_order","cancel_order"],
    state=CartState.checkout_confirm
)
async def on_confirm_order(c: types.CallbackQuery, state: FSMContext):
    if c.data == "cancel_order":
        await bot.send_message(c.from_user.id, "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        clear_cart(PROJECT_ID, c.from_user.id)
        return await state.finish()
    data = await state.get_data()
    items = get_cart_items(PROJECT_ID, c.from_user.id)
    for it in items:
        save_order({
            "project_id": PROJECT_ID,
            "user_id":    c.from_user.id,
            "product":    it['name'],
            "quantity":   it['quantity'],
            "address":    data['address'],
            "media_path": data.get('media')
        })
    clear_cart(PROJECT_ID, c.from_user.id)
    await bot.send_message(c.from_user.id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
    await state.finish()

# --- –ê–î–ú–ò–ù: –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä ---

@dp.message_handler(commands=['addproduct'])
async def cmd_addproduct(msg: types.Message):
    if msg.chat.id != ADMIN_CHAT: return
    await msg.answer("üÜï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await ProductAdminState.name.set()

@dp.message_handler(state=ProductAdminState.name)
async def prod_name(msg: types.Message, state: FSMContext):
    text = msg.text.strip()
    if not text:
        return await state.finish()
    await state.update_data(name=text)
    await msg.answer("üìã –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await ProductAdminState.short_desc.set()

@dp.message_handler(state=ProductAdminState.short_desc)
async def prod_short(msg: types.Message, state: FSMContext):
    text = msg.text.strip()
    if not text:
        return await state.finish()
    await state.update_data(short_desc=text)
    await msg.answer("üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ ¬´–Ω–µ—Ç¬ª:")
    await ProductAdminState.full_desc.set()

@dp.message_handler(state=ProductAdminState.full_desc)
async def prod_full(msg: types.Message, state: FSMContext):
    text = msg.text.strip()
    if not text:
        return await state.finish()
    full = "" if text.lower() == "–Ω–µ—Ç" else text
    await state.update_data(full_desc=full)
    await msg.answer("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ ¬´–Ω–µ—Ç¬ª:")
    await ProductAdminState.waiting_img.set()

@dp.message_handler(
    state=ProductAdminState.waiting_img,
    content_types=types.ContentTypes.ANY
)
async def prod_media(msg: types.Message, state: FSMContext):
    media_path = ""
    if msg.content_type in ['photo','document','video']:
        if msg.content_type == 'photo':
            file_id = msg.photo[-1].file_id
            orig_name = f"{file_id}.jpg"
            file_obj = await bot.get_file(file_id)  # type: ignore
            data_bytes = await bot.download_file(file_obj.file_path)  # type: ignore
        else:
            file_id = msg.document.file_id
            orig_name = msg.document.file_name
            file_obj = await bot.get_file(file_id)  # type: ignore
            data_bytes = await bot.download_file(file_obj.file_path)  # type: ignore
        path = save_media_file(
            project_id=PROJECT_ID,
            file_bytes=data_bytes,
            original_filename=orig_name,
            media_root=Path(__file__).parent.parent / "media"
        )
        media_path = path.name
    elif msg.text.lower() == "–Ω–µ—Ç":
        media_path = ""
    else:
        return await state.finish()
    data = await state.get_data()
    pid = add_product(
        PROJECT_ID,
        data['name'], data['short_desc'], data['full_desc'], media_path
    )
    await msg.answer(f"‚úÖ –¢–æ–≤–∞—Ä #{pid} –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.finish()

@dp.message_handler(commands=['delproduct'])
async def cmd_delproduct(msg: types.Message, state: FSMContext):
    if msg.chat.id != ADMIN_CHAT: return
    await state.update_data(del_page=1)
    await send_delete_page(msg.chat.id, state)
    await DeleteProductState.selecting_page.set()

async def send_delete_page(chat_id, state: FSMContext):
    data = await state.get_data()
    page = data.get('del_page', 1)
    prods = get_products_list(PROJECT_ID)
    slice = prods[(page-1)*9 : page*9]
    paths = []
    for p in slice:
        media = p["media"]
        if media:
            paths.append(str(Path(__file__).parent.parent / "media" / str(PROJECT_ID) / media))
    collage = generate_collage(paths, f"/tmp/del_{page}.jpg")
    kb = types.InlineKeyboardMarkup(row_width=3)
    for i in range(len(slice)):
        kb.insert(types.InlineKeyboardButton(str(i+1), callback_data=f"del_sel_{i+1}"))
    if page > 1:
        kb.insert(types.InlineKeyboardButton("‚Üê", callback_data="del_prev"))
    if page * 9 < len(prods):
        kb.insert(types.InlineKeyboardButton("‚Üí", callback_data="del_next"))
    await bot.send_photo(chat_id, collage, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data in ["del_prev","del_next"], state=DeleteProductState.selecting_page)
async def on_del_nav(c: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    page = data.get('del_page', 1)
    prods = get_products_list(PROJECT_ID)
    if c.data == "del_prev" and page > 1:
        page -= 1
    if c.data == "del_next" and page * 9 < len(prods):
        page += 1
    await state.update_data(del_page=page)
    await send_delete_page(c.from_user.id, state)
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("del_sel_"), state=DeleteProductState.selecting_page)
async def on_del_select(c: types.CallbackQuery, state: FSMContext):
    idx = int(c.data.split("_")[-1]) - 1
    data = await state.get_data()
    page = data['del_page']
    prods = get_products_list(PROJECT_ID)
    global_idx = (page-1)*9 + idx
    if global_idx >= len(prods):
        return await c.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
    p = prods[global_idx]
    await state.update_data(del_id=p['id'])
    kb = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="del_confirm"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",    callback_data="del_cancel")
    )
    await bot.send_message(c.from_user.id, f"–£–¥–∞–ª–∏—Ç—å ¬´{p['name']}¬ª?", reply_markup=kb)
    await DeleteProductState.confirming_delete.set()
    await c.answer()

@dp.callback_query_handler(lambda c: c.data=="del_confirm", state=DeleteProductState.confirming_delete)
async def on_del_confirm(c: types.CallbackQuery, state: FSMContext):
    pid = (await state.get_data())['del_id']
    delete_product(PROJECT_ID, pid)
    await bot.send_message(c.from_user.id, f"‚úÖ –¢–æ–≤–∞—Ä #{pid} —É–¥–∞–ª—ë–Ω.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data=="del_cancel", state=DeleteProductState.confirming_delete)
async def on_del_cancel(c: types.CallbackQuery, state: FSMContext):
    await bot.send_message(c.from_user.id, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp)
{% endraw %}
