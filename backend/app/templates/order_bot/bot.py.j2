from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from pathlib import Path
import sqlite3
from datetime import datetime

bot = Bot(token="{{ project.token }}")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ‚Äî FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî
class OrderState(StatesGroup):
    choosing_product   = State()
    entering_quantity  = State()
    entering_address   = State()
    uploading_media    = State()
    asking_more        = State()
    confirming         = State()

# ‚Äî FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∞ ‚Äî
class AdminState(StatesGroup):
    waiting_for_reply         = State()
    waiting_for_reject_reason = State()

# ‚Äî –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî
PROJECT_ID = {{ project.id }}
PRODUCTS   = {{ project.content.products }}        # —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥
ADMIN_CHAT = {{ project.content.admin_chat_id }}   # ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω-—á–∞—Ç–∞

# ‚Äî –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî
DB_PATH = Path(__file__).parent.parent / "app" / "database.db"

# ‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü orders –∏ banned_users ‚Äî
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            project_id INTEGER,
            user_id INTEGER,
            product TEXT,
            quantity INTEGER,
            address TEXT,
            media_path TEXT,
            status TEXT DEFAULT 'pending',
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS banned_users (
            project_id INTEGER,
            user_id INTEGER,
            PRIMARY KEY(project_id,user_id)
        )
    """)
    conn.commit()
    conn.close()

# ‚Äî –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ –≤ –ë–î ‚Äî
def save_order(data):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO orders (project_id,user_id,product,quantity,address,media_path)
        VALUES (?,?,?,?,?,?)
    """,(PROJECT_ID,data['user_id'],data['product'],
         data['quantity'],data['address'],data.get('media_path')))
    conn.commit()
    oid = cur.lastrowid
    conn.close()
    return oid

def set_order_status(order_id, status):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("UPDATE orders SET status=? WHERE id=?", (status, order_id))
    conn.commit()
    conn.close()

def get_order(order_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM orders WHERE id=? AND project_id=?", (order_id, PROJECT_ID))
    row = cur.fetchone()
    conn.close()
    return {'user_id': row[0]} if row else None

def ban_user(user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO banned_users (project_id,user_id) VALUES (?,?)",
                (PROJECT_ID, user_id))
    conn.commit()
    conn.close()

def is_banned(user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM banned_users WHERE project_id=? AND user_id=?",
                (PROJECT_ID, user_id))
    banned = cur.fetchone() is not None
    conn.close()
    return banned

# ‚Äî –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î ‚Äî
init_db()

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–õ–ò–ï–ù–¢–ê ===

@dp.message_handler(commands=['start','order'])
async def start_order(message: types.Message):
    if is_banned(message.from_user.id):
        return await message.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã.")
    if not PRODUCTS:
        return await message.answer("üö´ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É—Å–ª—É–≥.")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for p in PRODUCTS:
        kb.add(p)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ —É—Å–ª—É–≥—É:", reply_markup=kb)
    await OrderState.choosing_product.set()

@dp.message_handler(state=OrderState.choosing_product)
async def process_product(message: types.Message, state: FSMContext):
    if message.text not in PRODUCTS:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    await state.update_data(product=message.text, user_id=message.from_user.id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await OrderState.entering_quantity.set()

@dp.message_handler(state=OrderState.entering_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    await state.update_data(quantity=int(message.text))
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await OrderState.entering_address.set()

@dp.message_handler(state=OrderState.entering_address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ), –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª:",
                         reply_markup=types.ReplyKeyboardRemove())
    await OrderState.uploading_media.set()

@dp.message_handler(state=OrderState.uploading_media, content_types=types.ContentTypes.ANY)
async def process_media(message: types.Message, state: FSMContext):
    media_path = None
    if message.content_type in ['photo','document']:
        saved = await message.document.download(destination_dir=f"media/{PROJECT_ID}")
        media_path = saved.name
    await state.update_data(media_path=media_path)
    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä? (–¥–∞/–Ω–µ—Ç)")
    await OrderState.asking_more.set()

@dp.message_handler(state=OrderState.asking_more)
async def process_more(message: types.Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for p in PRODUCTS:
            kb.add(p)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä:", reply_markup=kb)
        await OrderState.choosing_product.set()
    else:
        data = await state.get_data()
        summary = (f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑:\n"
                   f"{data['product']} √ó {data['quantity']}\n"
                   f"–ê–¥—Ä–µ—Å: {data['address']}")
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å","‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
        await message.answer(summary, reply_markup=kb)
        await OrderState.confirming.set()

@dp.message_handler(state=OrderState.confirming)
async def process_confirm(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        return await state.finish()
    data = await state.get_data()
    order_id = save_order(data)
    await message.answer(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç.")
    # ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω-—á–∞—Ç ‚Äî
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    kb = InlineKeyboardMarkup(row_width=4).add(
        InlineKeyboardButton("‚úâ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{order_id}"),
        InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å",   callback_data=f"accept_{order_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å",  callback_data=f"reject_{order_id}"),
        InlineKeyboardButton("üö´ –ë–∞–Ω",       callback_data=f"ban_{order_id}")
    )
    await bot.send_message(
        ADMIN_CHAT,
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data['user_id']}\n"
        f"{data['product']} √ó {data['quantity']}\n"
        f"–ê–¥—Ä–µ—Å: {data['address']}",
        reply_markup=kb
    )
    await state.finish()

# === –ñ–ò–í–û–ô –î–ò–ê–õ–û–ì admin ‚Üî client ===

active_dialogs = {}  # —Ö—Ä–∞–Ω–∏—Ç –ø–∞—Ä—ã admin_id<->user_id

# –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –¥–∏–∞–ª–æ–≥–∞ (callback –Ω–∏–∂–µ) –º—ã –∑–∞–ø–æ–ª–Ω—è–µ–º active_dialogs

@dp.message_handler(lambda m: m.from_user.id in active_dialogs and
                            m.chat.id == active_dialogs[m.from_user.id])
async def client_to_admin(message: types.Message):
    # –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω—É
    target = active_dialogs[message.from_user.id]
    await bot.send_message(target, f"üßë –ö–ª–∏–µ–Ω—Ç: {message.text}")

@dp.message_handler(lambda m: m.from_user.id in active_dialogs and
                            m.chat.id == ADMIN_CHAT)
async def admin_to_client(message: types.Message):
    target = active_dialogs[message.from_user.id]
    await bot.send_message(target, f"üë§ –ê–¥–º–∏–Ω: {message.text}")

# === CALLBACK-handlers –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞ ===

@dp.callback_query_handler(lambda c: c.data.startswith("reply_"))
async def on_reply_cb(c: types.CallbackQuery):
    order_id = int(c.data.split("_")[1])
    order = get_order(order_id)
    # –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥
    admin_id = c.from_user.id
    user_id = order["user_id"]
    active_dialogs[admin_id] = user_id
    active_dialogs[user_id]  = admin_id
    await bot.send_message(admin_id, f"üîÑ –î–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º #{user_id} –Ω–∞—á–∞—Ç. –ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("accept_"))
async def on_accept_cb(c: types.CallbackQuery):
    order_id = int(c.data.split("_")[1])
    order = get_order(order_id)
    set_order_status(order_id, "accepted")
    # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    end_admin = c.from_user.id
    end_user  = order["user_id"]
    active_dialogs.pop(end_admin, None)
    active_dialogs.pop(end_user,  None)
    await bot.send_message(end_user, f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
    await c.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç")

@dp.callback_query_handler(lambda c: c.data.startswith("reject_"))
async def on_reject_cb(c: types.CallbackQuery, state: FSMContext):
    order_id = int(c.data.split("_")[1])
    await state.update_data(reject_order_id=order_id)
    await bot.send_message(c.from_user.id, f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:")
    await AdminState.waiting_for_reject_reason.set()
    await c.answer()

@dp.message_handler(state=AdminState.waiting_for_reject_reason)
async def handle_reject_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["reject_order_id"]
    order = get_order(order_id)
    set_order_status(order_id, "rejected")
    # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    admin_id = message.from_user.id
    user_id  = order["user_id"]
    active_dialogs.pop(admin_id, None)
    active_dialogs.pop(user_id,  None)
    await bot.send_message(user_id, f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {message.text}")
    await message.answer("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith("ban_"))
async def on_ban_cb(c: types.CallbackQuery):
    order_id = int(c.data.split("_")[1])
    order = get_order(order_id)
    ban_user(order["user_id"])
    # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    admin_id = c.from_user.id
    user_id  = order["user_id"]
    active_dialogs.pop(admin_id, None)
    active_dialogs.pop(user_id,  None)
    await bot.send_message(user_id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã.")
    await c.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    executor.start_polling(dp)
