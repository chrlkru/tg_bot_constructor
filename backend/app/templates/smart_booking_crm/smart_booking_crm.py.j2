{% raw %}
#!/usr/bin/env python3
import os
from pathlib import Path
from datetime import datetime, date, timedelta
from io import BytesIO

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from openpyxl import Workbook, load_workbook

from app.database import (
    init_db,
    # services
    add_service, get_services, delete_service,
    # work intervals
    add_work_interval, get_work_intervals, delete_work_interval,
    # panic exceptions
    add_work_exception, activate_planned_exception, cancel_bookings_in_interval,
    # bookings & users
    create_booking_safe, get_booking, ban_user, is_banned,
    # reminders & summary
    get_confirmed_future_bookings, get_planned_exceptions, get_bookings_by_date,
    # export CRM
    get_all_clients, get_all_bookings,
    # settings
    get_setting, set_setting
)
from utils.inline_calendar import build_date_calendar, build_schedule_view
from utils.slots import (
    is_slot_blocked, is_slot_booked, find_free_slots,
    toggle_booking, toggle_block, schedule_booking_reminders
)

# ‚Äî Environment & constants ‚Äî
load_dotenv()
BOT_TOKEN     = os.getenv("TOKEN")
ADMIN_CHAT    = {{ project.content.admin_chat_id }}
PROJECT_ID    = {{ project.id }}
SLOT_SIZE_MIN = {{ project.content.slot_size_minutes }}
TZ            = os.getenv("TZ", "Europe/Bucharest")

# ‚Äî Bot, FSM, Scheduler ‚Äî
bot       = Bot(token=BOT_TOKEN)
storage   = MemoryStorage()
dp        = Dispatcher(bot, storage=storage)
scheduler = AsyncIOScheduler(timezone=TZ)

# ‚Äî Initialize DB tables ‚Äî
init_db()

# === FSM States ===
class ClientStates(StatesGroup):
    choosing_category = State()
    choosing_service  = State()
    choosing_date     = State()
    choosing_time     = State()
    waiting_details   = State()

class AdminStates(StatesGroup):
    in_menu                 = State()
    adding_service_name     = State()
    adding_service_price    = State()
    adding_service_duration = State()
    adding_service_category = State()
    deleting_service        = State()
    adding_slot_date        = State()
    adding_slot_time        = State()
    removing_slot           = State()
    viewing_schedule        = State()
    panic_now_duration      = State()
    panic_later_date        = State()
    panic_later_time        = State()
    config_notify_menu      = State()
    config_summary_time     = State()
    config_timezone         = State()

# === UI Builders ===
def build_admin_menu() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É",       callback_data="admin_add_service"),
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É",        callback_data="admin_del_service"),
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–∫–Ω–æ",         callback_data="admin_add_slot"),
        InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –æ–∫–Ω–æ",          callback_data="admin_remove_slot"),
        InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",           callback_data="admin_schedule"),
        InlineKeyboardButton("‚õî –°—Ä–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—å",        callback_data="admin_panic_now"),
        InlineKeyboardButton("‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ",callback_data="admin_panic_later"),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏",   callback_data="admin_config_notify"),
        InlineKeyboardButton("üìÜ –°–µ–≥–æ–¥–Ω—è",              callback_data="admin_today"),
        InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç CRM",          callback_data="admin_export")
    )
    return kb

# === Reminders & Summary ===
async def send_reminder(booking_id: int, label: str):
    b = get_booking(booking_id)
    if not b:
        return
    dt = datetime.fromisoformat(b["start_dt"])
    await bot.send_message(
        b["user_id"],
        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {label}: –∑–∞–ø–∏—Å—å –Ω–∞ ¬´{b['service_name']}¬ª\n"
        f"{dt.strftime('%d.%m.%Y %H:%M')}."
    )

def send_daily_summary():
    if get_setting('summary_enabled') != 'true':
        return
    today_str = datetime.utcnow().date().isoformat()
    rows = get_bookings_by_date(PROJECT_ID, today_str, status="confirmed")
    if rows:
        lines = [
            f"{datetime.fromisoformat(r['start_dt']).strftime('%H:%M')} ‚Äî "
            f"{r['service_name']} ({r['client_name']})"
            for r in rows
        ]
        text = "üìÜ –°–≤–æ–¥–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(lines)
    else:
        text = "üôå –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."
    bot.loop.create_task(bot.send_message(ADMIN_CHAT, text))

def schedule_daily_summary_job():
    try:
        scheduler.remove_job('daily_summary')
    except Exception:
        pass
    if get_setting('summary_enabled') != 'true':
        return
    h, m = map(int, get_setting('summary_time').split(":"))
    tz = get_setting('summary_timezone')
    scheduler.add_job(
        send_daily_summary, 'cron', hour=h, minute=m,
        timezone=tz, id='daily_summary'
    )

def restore_tasks():
    for b in get_confirmed_future_bookings(PROJECT_ID):
        schedule_booking_reminders(b["id"])
    for ex in get_planned_exceptions(PROJECT_ID):
        dt = datetime.fromisoformat(ex["start_dt"])
        if dt > datetime.utcnow():
            scheduler.add_job(
                activate_planned_exception, "date",
                run_date=dt, args=[ex["id"]]
            )

# === Client Handlers ===

@dp.message_handler(commands=['start'])
async def send_welcome(msg: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
    await msg.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def start_booking(msg: types.Message):
    if is_banned(PROJECT_ID, msg.from_user.id):
        return await msg.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
    cats = sorted({s["category"] for s in get_services(PROJECT_ID)})
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for c in cats:
        kb.add(c)
    kb.add("–û—Ç–º–µ–Ω–∞")
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    await ClientStates.choosing_category.set()

@dp.message_handler(state=ClientStates.choosing_category)
async def choose_category(msg: types.Message, state: FSMContext):
    if msg.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        return await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
    services = [s for s in get_services(PROJECT_ID) if s["category"] == msg.text]
    if not services:
        return await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    await state.update_data(category=msg.text)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for s in services:
        kb.add(f"{s['name']} ‚Äî {s['price']}‚ÇΩ / {s['duration_cells']}√ó{SLOT_SIZE_MIN}–º")
    kb.add("–ù–∞–∑–∞–¥", "–û—Ç–º–µ–Ω–∞")
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=kb)
    await ClientStates.choosing_service.set()

@dp.message_handler(state=ClientStates.choosing_service)
async def choose_service(msg: types.Message, state: FSMContext):
    if msg.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        return await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
    if msg.text == "–ù–∞–∑–∞–¥":
        return await start_booking(msg)
    name = msg.text.split(" ‚Äî ")[0]
    svc = next((s for s in get_services(PROJECT_ID) if s["name"] == name), None)
    if not svc:
        return await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    await state.update_data(
        service_id=svc["id"],
        service_name=svc["name"],
        duration_cells=svc["duration_cells"]
    )
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=build_date_calendar(7))
    await ClientStates.choosing_date.set()

@dp.callback_query_handler(lambda c: c.data.startswith("date_"), state=ClientStates.choosing_date)
async def choose_date(c: types.CallbackQuery, state: FSMContext):
    ds = c.data.split("_", 1)[1]
    await state.update_data(chosen_date=ds)
    data = await state.get_data()
    slots = find_free_slots(PROJECT_ID, ds, data["duration_cells"])
    if not slots:
        return await c.answer("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤", show_alert=True)
    kb = InlineKeyboardMarkup(row_width=3)
    for sl in slots:
        t = sl.split("_")[1]
        kb.insert(InlineKeyboardButton(t, callback_data=f"slot_{sl}"))
    await c.message.edit_text("–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:", reply_markup=kb)
    await ClientStates.choosing_time.set()
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("slot_"), state=ClientStates.choosing_time)
async def choose_time(c: types.CallbackQuery, state: FSMContext):
    sl = c.data.split("_", 1)[1]
    dt = datetime.strptime(sl, "%Y%m%d_%H%M")
    await state.update_data(chosen_datetime=dt.isoformat())
    kb = types.ReplyKeyboardMarkup().add("–û—Ç–º–µ–Ω–∞")
    await bot.send_message(
        c.from_user.id,
        f"–í—ã–±—Ä–∞–Ω–æ {dt.strftime('%d.%m.%Y %H:%M')}\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω:",
        reply_markup=kb
    )
    await ClientStates.waiting_details.set()
    await c.answer()

@dp.message_handler(state=ClientStates.waiting_details)
async def enter_details(msg: types.Message, state: FSMContext):
    if msg.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        return await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
    try:
        name, phone = msg.text.rsplit(" ", 1)
    except ValueError:
        return await msg.answer("–§–æ—Ä–º–∞—Ç: –ò–º—è –¢–µ–ª–µ—Ñ–æ–Ω")
    data = await state.get_data()
    try:
        bid = create_booking_safe(
            PROJECT_ID,
            msg.from_user.id,
            data["service_id"],
            data["chosen_datetime"],
            data["duration_cells"],
            name,
            phone
        )
    except Exception as e:
        await msg.answer(f"‚ùó {e}")
        return await state.finish()
    await msg.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{bid} —Å–æ–∑–¥–∞–Ω!", reply_markup=ReplyKeyboardRemove())
    schedule_booking_reminders(bid)
    await bot.send_message(
        ADMIN_CHAT,
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{bid}\n"
        f"–£—Å–ª—É–≥–∞: {data['service_name']}\n"
        f"–î–∞—Ç–∞: {data['chosen_datetime']}\n"
        f"–ö–ª–∏–µ–Ω—Ç: {name}, {phone}"
    )
    await state.finish()

# === Admin Menu & Handlers ===

@dp.message_handler(lambda m: m.chat.id == ADMIN_CHAT, content_types=types.ContentTypes.TEXT)
async def show_admin_menu(msg: types.Message):
    await msg.answer("üõ† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=build_admin_menu())
    await AdminStates.in_menu.set()

@dp.callback_query_handler(lambda c: c.data == "admin_cancel", state="*")
async def cancel_any(c: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await c.message.edit_text("‚ùé –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\nüõ† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=build_admin_menu())
    await c.answer()

# -- CRUD Services --

@dp.callback_query_handler(lambda c: c.data == "admin_add_service", state=AdminStates.in_menu)
async def admin_add_start(c: types.CallbackQuery):
    await c.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")
    await AdminStates.adding_service_name.set()
    await c.answer()

@dp.message_handler(state=AdminStates.adding_service_name, lambda m: m.chat.id == ADMIN_CHAT)
async def admin_add_name(msg: types.Message, state: FSMContext):
    await state.update_data(name=msg.text.strip())
    await msg.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
    await AdminStates.adding_service_price.set()

@dp.message_handler(state=AdminStates.adding_service_price, lambda m: m.chat.id == ADMIN_CHAT)
async def admin_add_price(msg: types.Message, state: FSMContext):
    if not msg.text.isdigit():
        return await msg.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.update_data(price=int(msg.text))
    await msg.answer(f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (–∫—Ä–∞—Ç–Ω–∞ {SLOT_SIZE_MIN}):")
    await AdminStates.adding_service_duration.set()

@dp.message_handler(state=AdminStates.adding_service_duration, lambda m: m.chat.id == ADMIN_CHAT)
async def admin_add_duration(msg: types.Message, state: FSMContext):
    if not msg.text.isdigit() or int(msg.text) % SLOT_SIZE_MIN != 0:
        return await msg.answer(f"‚ùó –ö—Ä–∞—Ç–Ω–æ—Å—Ç—å {SLOT_SIZE_MIN}.")
    await state.update_data(duration_cells=int(msg.text) // SLOT_SIZE_MIN)
    await msg.answer("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–∏–ª–∏ ¬´‚Äî¬ª):")
    await AdminStates.adding_service_category.set()

@dp.message_handler(state=AdminStates.adding_service_category, lambda m: m.chat.id == ADMIN_CHAT)
async def admin_add_category(msg: types.Message, state: FSMContext):
    cat = msg.text.strip()
    if cat == "‚Äî":
        cat = "–û–±—â–µ–µ"
    data = await state.get_data()
    sid = add_service(data['name'], cat, data['price'], data['duration_cells'])
    await msg.answer(f"‚úÖ –£—Å–ª—É–≥–∞ #{sid} –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=build_admin_menu())
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "admin_del_service", state=AdminStates.in_menu)
async def admin_del_list(c: types.CallbackQuery):
    svs = get_services(PROJECT_ID)
    kb = InlineKeyboardMarkup(row_width=1)
    for s in svs:
        kb.add(InlineKeyboardButton(f"‚ùå {s['id']}. {s['name']}", callback_data=f"delsvc_{s['id']}"))
    kb.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_cancel"))
    await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await AdminStates.deleting_service.set()
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("delsvc_"), state=AdminStates.deleting_service)
async def admin_del_confirm(c: types.CallbackQuery, state: FSMContext):
    sid = int(c.data.split("_", 1)[1])
    await state.update_data(del_id=sid)
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="del_yes"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="del_no")
    )
    s = next(s for s in get_services(PROJECT_ID) if s['id'] == sid)
    await c.message.edit_text(f"–£–¥–∞–ª–∏—Ç—å ¬´{s['name']}¬ª?", reply_markup=kb)
    await AdminStates.deleting_service.set()

@dp.callback_query_handler(lambda c: c.data in ["del_yes", "del_no"], state=AdminStates.deleting_service)
async def admin_del_done(c: types.CallbackQuery, state: FSMContext):
    if c.data == "del_yes":
        sid = (await state.get_data())['del_id']
        delete_service(sid)
        text = f"‚úÖ –£—Å–ª—É–≥–∞ #{sid} —É–¥–∞–ª–µ–Ω–∞."
    else:
        text = "‚ùå –û—Ç–º–µ–Ω–∞."
    await c.message.edit_text(text, reply_markup=build_admin_menu())
    await state.finish()
    await c.answer()

# -- CRUD Intervals --

@dp.callback_query_handler(lambda c: c.data == "admin_add_slot", state=AdminStates.in_menu)
async def admin_add_slot_start(c: types.CallbackQuery):
    await c.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ–∫–Ω–∞:", reply_markup=build_date_calendar(14))
    await AdminStates.adding_slot_date.set()
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("date_"), state=AdminStates.adding_slot_date)
async def admin_add_slot_date(c: types.CallbackQuery, state: FSMContext):
    ds = c.data.split("_", 1)[1]
    await state.update_data(slot_date=ds)
    await c.message.edit_text("‚è± –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª HH:MM-HH:MM:")
    await AdminStates.adding_slot_time.set()
    await c.answer()

@dp.message_handler(state=AdminStates.adding_slot_time, lambda m: m.chat.id == ADMIN_CHAT)
async def admin_add_slot_time(msg: types.Message, state: FSMContext):
    txt = msg.text.strip()
    try:
        start, end = txt.split("-")
        ds = (await state.get_data())["slot_date"]
        start_iso = f"{ds}T{start}"
        end_iso = f"{ds}T{end}"
        add_work_interval(PROJECT_ID, start_iso, end_iso)
        await msg.answer(f"‚úÖ –û–∫–Ω–æ {ds} {txt} –¥–æ–±–∞–≤–ª–µ–Ω–æ.", reply_markup=build_admin_menu())
    except Exception:
        await msg.answer("‚ùó –§–æ—Ä–º–∞—Ç HH:MM-HH:MM.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "admin_remove_slot", state=AdminStates.in_menu)
async def admin_remove_slot_list(c: types.CallbackQuery):
    ivs = get_work_intervals(PROJECT_ID, 30)
    kb = InlineKeyboardMarkup(row_width=1)
    for iv in ivs:
        kb.add(InlineKeyboardButton(f"{iv['id']}. {iv['start_dt']}‚Äì{iv['end_dt']}",
                                    callback_data=f"rmslot_{iv['id']}"))
    kb.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_cancel"))
    await c.message.edit_text("–£–¥–∞–ª–∏—Ç—å –æ–∫–Ω–æ:", reply_markup=kb)
    await AdminStates.removing_slot.set()
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("rmslot_"), state=AdminStates.removing_slot)
async def admin_remove_slot_confirm(c: types.CallbackQuery, state: FSMContext):
    iid = int(c.data.split("_", 1)[1])
    await state.update_data(rem_id=iid)
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="rmslot_yes"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="rmslot_no")
    )
    await c.message.edit_text(f"–£–¥–∞–ª–∏—Ç—å –æ–∫–Ω–æ #{iid}?", reply_markup=kb)
    await c.answer()

@dp.callback_query_handler(lambda c: c.data in ["rmslot_yes", "rmslot_no"], state=AdminStates.removing_slot)
async def admin_remove_slot_done(c: types.CallbackQuery, state: FSMContext):
    if c.data == "rmslot_yes":
        iid = (await state.get_data())['rem_id']
        delete_work_interval(iid)
        text = f"‚úÖ –û–∫–Ω–æ #{iid} —É–¥–∞–ª–µ–Ω–æ."
    else:
        text = "‚ùå –û—Ç–º–µ–Ω–∞."
    await c.message.edit_text(text, reply_markup=build_admin_menu())
    await state.finish()
    await c.answer()

# -- Schedule View --

@dp.callback_query_handler(lambda c: c.data == "admin_schedule", state=AdminStates.in_menu)
async def admin_schedule_start(c: types.CallbackQuery, state: FSMContext):
    today = date.today()
    await state.update_data(schedule_date=today, schedule_mode="busy")
    txt, kb = build_schedule_view(today, "busy")
    await c.message.edit_text(txt, reply_markup=kb)
    await AdminStates.viewing_schedule.set()
    await c.answer()

@dp.callback_query_handler(lambda c: c.data in ["sch_prev", "sch_next"], state=AdminStates.viewing_schedule)
async def admin_schedule_nav(c: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    day = data["schedule_date"]
    new_day = day - timedelta(days=1) if c.data == "sch_prev" else day + timedelta(days=1)
    await state.update_data(schedule_date=new_day)
    txt, kb = build_schedule_view(new_day, data["schedule_mode"])
    await c.message.edit_text(txt, reply_markup=kb)
    await c.answer()

@dp.callback_query_handler(lambda c: c.data == "sch_toggle", state=AdminStates.viewing_schedule)
async def admin_schedule_toggle(c: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    modes = ["busy", "free", "panic"]
    idx = modes.index(data["schedule_mode"])
    new_mode = modes[(idx + 1) % 3]
    await state.update_data(schedule_mode=new_mode)
    txt, kb = build_schedule_view(data["schedule_date"], new_mode)
    await c.message.edit_text(txt, reply_markup=kb)
    await c.answer(f"–†–µ–∂–∏–º: {new_mode}")

@dp.callback_query_handler(lambda c: c.data.startswith("slot_"), state=AdminStates.viewing_schedule)
async def admin_schedule_slot(c: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    mode = data["schedule_mode"]
    dt = datetime.strptime(c.data.split("_", 1)[1], "%Y%m%d_%H%M")
    if mode in ["busy", "free"]:
        toggle_booking(PROJECT_ID, dt)
    else:
        toggle_block(PROJECT_ID, dt)
    txt, kb = build_schedule_view(data["schedule_date"], mode)
    await c.message.edit_text(txt, reply_markup=kb)
    await c.answer()

# -- Panic Now --

@dp.callback_query_handler(lambda c: c.data == "admin_panic_now", state=AdminStates.in_menu)
async def panic_now_start(c: types.CallbackQuery):
    await c.message.edit_text("‚õî –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Ç–º–µ–Ω—ã –≤ —á–∞—Å–∞—Ö:")
    await AdminStates.panic_now_duration.set()
    await c.answer()

@dp.message_handler(state=AdminStates.panic_now_duration, lambda m: m.chat.id == ADMIN_CHAT)
async def panic_now_duration(msg: types.Message, state: FSMContext):
    if not msg.text.isdigit():
        return await msg.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    hrs = int(msg.text)
    now = datetime.utcnow()
    end = now + timedelta(hours=hrs)
    ex_id = add_work_exception(PROJECT_ID, now.isoformat(), end.isoformat(), "active")
    canceled = cancel_bookings_in_interval(PROJECT_ID, now.isoformat(), end.isoformat())
    for b in canceled:
        await bot.send_message(b["user_id"], f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{b['id']} –æ—Ç–º–µ–Ω—ë–Ω.")
    await msg.answer(f"‚úÖ –ü–∞–Ω–∏–∫–∞ –Ω–∞ {hrs} —á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.", reply_markup=build_admin_menu())
    await state.finish()

# -- Panic Later --

@dp.callback_query_handler(lambda c: c.data == "admin_panic_later", state=AdminStates.in_menu)
async def panic_later_start(c: types.CallbackQuery):
    await c.message.edit_text("‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–ª–∞–Ω–æ–≤–æ–π –æ—Ç–º–µ–Ω—ã:", reply_markup=build_date_calendar(14))
    await AdminStates.panic_later_date.set()
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("date_"), state=AdminStates.panic_later_date)
async def panic_later_date(c: types.CallbackQuery, state: FSMContext):
    ds = c.data.split("_", 1)[1]
    await state.update_data(panic_date=ds)
    await c.message.edit_text("‚è± –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª HH:MM-HH:MM:")
    await AdminStates.panic_later_time.set()
    await c.answer()

@dp.message_handler(state=AdminStates.panic_later_time, lambda m: m.chat.id == ADMIN_CHAT)
async def panic_later_time(msg: types.Message, state: FSMContext):
    try:
        start, end = msg.text.strip().split("-")
        ds = (await state.get_data())["panic_date"]
        s_iso = f"{ds}T{start}"
        e_iso = f"{ds}T{end}"
        ex_id = add_work_exception(PROJECT_ID, s_iso, e_iso, "planned")
        run_dt = datetime.fromisoformat(s_iso)
        scheduler.add_job(activate_planned_exception, "date", run_date=run_dt, args=[ex_id])
        await msg.answer("‚è≥ –ü–ª–∞–Ω–æ–≤–∞—è –ø–∞–Ω–∏–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.", reply_markup=build_admin_menu())
    except Exception:
        await msg.answer("‚ùó –§–æ—Ä–º–∞—Ç HH:MM-HH:MM.")
    await state.finish()

# -- Notify Config --

@dp.callback_query_handler(lambda c: c.data == "admin_config_notify", state=AdminStates.in_menu)
async def cfg_notify_menu(c: types.CallbackQuery):
    en = get_setting('summary_enabled') == 'true'
    tm = get_setting('summary_time')
    tz = get_setting('summary_timezone')
    text = f"üõ† –°–≤–æ–¥–∫–∞:\n–í–∫–ª: {'‚úÖ' if en else '‚ùå'}\n–í—Ä–µ–º—è: {tm}\nTZ: {tz}"
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üîÅ –í–∫–ª/–í—ã–∫–ª", callback_data="cfg_toggle_enable"),
        InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è", callback_data="cfg_set_time"),
        InlineKeyboardButton("üåê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="cfg_set_tz"),
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_cancel")
    )
    await c.message.edit_text(text, reply_markup=kb)
    await AdminStates.config_notify_menu.set()
    await c.answer()

@dp.callback_query_handler(lambda c: c.data == "cfg_toggle_enable", state=AdminStates.config_notify_menu)
async def cfg_toggle_enable(c: types.CallbackQuery):
    cur = get_setting('summary_enabled') == 'true'
    set_setting('summary_enabled', 'false' if cur else 'true')
    schedule_daily_summary_job()
    await c.answer("–ì–æ—Ç–æ–≤–æ")
    return await cfg_notify_menu(c)

@dp.callback_query_handler(lambda c: c.data == "cfg_set_time", state=AdminStates.config_notify_menu)
async def cfg_set_time_prompt(c: types.CallbackQuery):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_config_notify"))
    await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ HH:MM:", reply_markup=kb)
    await AdminStates.config_summary_time.set()
    await c.answer()

@dp.message_handler(state=AdminStates.config_summary_time, lambda m: m.chat.id == ADMIN_CHAT)
async def cfg_set_time_apply(msg: types.Message, state: FSMContext):
    try:
        h, m = map(int, msg.text.strip().split(":"))
        assert 0 <= h < 24 and 0 <= m < 60
        set_setting('summary_time', f"{h:02d}:{m:02d}")
        schedule_daily_summary_job()
        await msg.answer("‚è∞ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=build_admin_menu())
    except Exception:
        await msg.answer("‚ùó –§–æ—Ä–º–∞—Ç HH:MM")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "cfg_set_tz", state=AdminStates.config_notify_menu)
async def cfg_set_tz_prompt(c: types.CallbackQuery):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_config_notify"))
    await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ IANA —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", reply_markup=kb)
    await AdminStates.config_timezone.set()
    await c.answer()

@dp.message_handler(state=AdminStates.config_timezone, lambda m: m.chat.id == ADMIN_CHAT)
async def cfg_set_tz_apply(msg: types.Message, state: FSMContext):
    set_setting('summary_timezone', msg.text.strip())
    schedule_daily_summary_job()
    await msg.answer("üåê TZ –æ–±–Ω–æ–≤–ª—ë–Ω", reply_markup=build_admin_menu())
    await state.finish()

# -- Today manual summary --
@dp.callback_query_handler(lambda c: c.data == "admin_today", state=AdminStates.in_menu)
async def admin_today(c: types.CallbackQuery):
    send_daily_summary()
    await c.answer("–°–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

# -- Export CRM --
@dp.callback_query_handler(lambda c: c.data == "admin_export", state=AdminStates.in_menu)
async def admin_export(c: types.CallbackQuery):
    wb = Workbook()
    ws1 = wb.active
    ws1.title = "Clients"
    ws1.append(["user_id", "name", "phone"])
    for cl in get_all_clients(PROJECT_ID):
        ws1.append([cl["user_id"], cl["name"], cl["phone"]])
    ws2 = wb.create_sheet("Bookings")
    ws2.append(["id", "service", "start_dt", "client", "status"])
    for b in get_all_bookings(PROJECT_ID):
        ws2.append([b["id"], b["service_name"], b["start_dt"], b["client_name"], b["status"]])
    bio = BytesIO()
    wb.save(bio)
    bio.seek(0)
    await bot.send_document(ADMIN_CHAT, bio, filename="crm_export.xlsx")
    await c.answer("–≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤")

# -- Help Commands --
@dp.message_handler(commands=['help'])
async def help_user(msg: types.Message):
    await msg.answer("‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ ¬´üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª –¥–ª—è –∑–∞–∫–∞–∑–∞.")

@dp.message_handler(commands=['adminhelp'])
async def help_admin(msg: types.Message):
    if msg.chat.id == ADMIN_CHAT:
        await show_admin_menu(msg)

# === Startup ===
if __name__ == '__main__':
    restore_tasks()
    schedule_daily_summary_job()
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
{% endraw %}
