{# templates/quiz_bot/bot.py.j2 #}
#!/usr/bin/env python3
import os
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from utils.excel import append_survey_result, send_excel_report

# ‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚Äî
load_dotenv()
BOT_TOKEN   = os.getenv("BOT_TOKEN")
ADMIN_CHAT  = {{ project.content.admin_chat_id }}
RESULTS_DIR = Path("results")
RESULTS_DIR.mkdir(exist_ok=True)

# ‚Äî –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî
RESULTS_FILE = RESULTS_DIR / f"survey_results_{{ project.id }}.xlsx"

# ‚Äî –í–æ–ø—Ä–æ—Å—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî
questions = {{ project.content.questions }}
questions_dict = {q["id"]: q for q in questions}

# ‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ FSM ‚Äî
bot      = Bot(token=BOT_TOKEN)
storage  = MemoryStorage()
dp       = Dispatcher(bot, storage=storage)

# === FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–ø—Ä–æ—Å–∞ ===
class QuizState(StatesGroup):
    question_id = State()

# === FSM –¥–ª—è –∫–æ–º–∞–Ω–¥—ã TOP ===
class AdminTopState(StatesGroup):
    waiting_for_correct = State()

# === –£—Ç–∏–ª–∏—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω—É ===
async def send_results_to_admin(user_id: int, answers: dict):
    try:
        chat = await bot.get_chat(user_id)
        name = f"@{chat.username}" if chat.username else str(user_id)
        text = f"üìã –ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}\n\n"
        for q in questions:
            ans = answers.get(q["id"], "")
            text += f"{q['id']}. {q['text']} ‚Äî {ans}\n"
        text += f"\n‚è± {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        await bot.send_message(ADMIN_CHAT, text)
    except Exception as e:
        print(f"Error notifying admin: {e}")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ ===
async def send_question(user_id: int, question: dict, state: FSMContext):
    opts = question.get("options", [])
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for o in opts:
        markup.add(o)
    if "photo" in question:
        await bot.send_photo(user_id, question["photo"], caption=question["text"], reply_markup=markup)
    elif "gif" in question:
        await bot.send_animation(user_id, question["gif"], caption=question["text"], reply_markup=markup)
    else:
        await bot.send_message(user_id, question["text"], reply_markup=markup)
    await QuizState.question_id.set()
    await state.update_data(current_question_id=question["id"])

# === –ö–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏ ===
@dp.message_handler(commands=['help'])
async def cmd_help_user(msg: types.Message):
    await msg.answer(
        "‚ÑπÔ∏è –Ø –ø—Ä–æ–≤–µ–¥—É –≤–∞—Å —á–µ—Ä–µ–∑ –æ–ø—Ä–æ—Å:\n"
        "1) –í–≤–µ–¥–∏—Ç–µ /start\n"
        "2) –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–Ω–æ–ø–∫–∞–º–∏\n"
        "3) –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É –Ω–∞–∂–º–∏—Ç–µ /help"
    )

@dp.message_handler(commands=['adminhelp'])
async def cmd_help_admin(msg: types.Message):
    if msg.chat.id != ADMIN_CHAT:
        return
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üèÖ –¢–æ–ø",        callback_data="admin_top"),
        InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç",    callback_data="admin_export")
    )
    await msg.answer("üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é –æ–ø—Ä–æ—Å–∞:", reply_markup=kb)

# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback ===
@dp.message_handler(state="*")
async def fallback(msg: types.Message):
    if msg.chat.id == ADMIN_CHAT:
        return await cmd_help_admin(msg)
    return await cmd_help_user(msg)

# === –°—Ç–∞—Ä—Ç –æ–ø—Ä–æ—Å–∞ ===
@dp.message_handler(commands=['start'])
async def start_quiz(message: types.Message, state: FSMContext):
    first_q = questions[0]
    await send_question(message.chat.id, first_q, state)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@dp.message_handler(state=QuizState.question_id)
async def handle_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    qid = data.get("current_question_id")
    answers = data.get("answers", {})
    answers[qid] = message.text
    await state.update_data(answers=answers)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    q = questions_dict[qid]
    next_qid = None
    if "branches" in q:
        next_qid = q["branches"].get(message.text)
    if not next_qid:
        idx = next(i for i,x in enumerate(questions) if x["id"]==qid)
        if idx + 1 < len(questions):
            next_qid = questions[idx+1]["id"]

    if next_qid:
        await send_question(message.chat.id, questions_dict[next_qid], state)
    else:
        # –ö–æ–Ω–µ—Ü –æ–ø—Ä–æ—Å–∞
        user_answers = (await state.get_data())["answers"]
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel
        append_survey_result(
            file_path=RESULTS_FILE,
            survey_id={{ project.id }},
            user_id=message.from_user.id,
            answers=user_answers,
            question_order=[q_item["id"] for q_item in questions]
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É
        await send_results_to_admin(message.from_user.id, user_answers)
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞!", reply_markup=ReplyKeyboardRemove())
        await state.finish()

# === ADMIN: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
@dp.callback_query_handler(lambda c: c.data=="admin_stats")
async def admin_stats(c: types.CallbackQuery):
    try:
        wb = load_workbook(RESULTS_FILE)
        ws = wb.active
        data_rows = list(ws.iter_rows(values_only=True))[1:]
        total = len(data_rows)
        text = f"üìä –í—Å–µ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π: {total}\n\n"
        headers = ws[1]
        for col_idx, cell in enumerate(headers[3:], start=3):
            counts = {}
            for row in data_rows:
                ans = row[col_idx]
                counts[ans] = counts.get(ans, 0) + 1
            qid = int(cell.value.split('_')[1])
            qtext = questions_dict[qid]["text"]
            text += f"{qid}. {qtext}\n"
            for ans, cnt in counts.items():
                text += f"  ‚Äî {ans}: {cnt}\n"
            text += "\n"
    except Exception as e:
        text = f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
    await c.message.edit_text(text)
    await c.answer()

# === ADMIN: –¢–æ–ø –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º ===
@dp.callback_query_handler(lambda c: c.data=="admin_top")
async def admin_top_prompt(c: types.CallbackQuery, state: FSMContext):
    await c.message.edit_text(
        "üèÖ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ `|`, –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: –î–∞|–ù–µ—Ç|–í–∞—Ä–∏–∞–Ω—Ç3|‚Ä¶",
        parse_mode="Markdown"
    )
    await AdminTopState.waiting_for_correct.set()
    await c.answer()

@dp.message_handler(state=AdminTopState.waiting_for_correct)
async def admin_top_calc(msg: types.Message, state: FSMContext):
    correct = [a.strip() for a in msg.text.split("|")]
    if len(correct) != len(questions):
        return await msg.answer("‚ùó –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç–≤–µ—Ç–æ–≤.")
    try:
        wb = load_workbook(RESULTS_FILE)
        ws = wb.active
        data_rows = list(ws.iter_rows(values_only=True))[1:]
        best, max_score = [], -1
        for row in data_rows:
            uid = row[2]
            user_ans = row[3:]
            score = sum(ua==ca for ua,ca in zip(user_ans, correct))
            if score > max_score:
                best, max_score = [uid], score
            elif score == max_score:
                best.append(uid)
        if max_score <= 0:
            text = "–ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
        else:
            names = []
            for uid in set(best):
                chat = await bot.get_chat(uid)
                names.append(f"@{chat.username}" if chat.username else str(uid))
            text = f"üèÖ –õ—É—á—à–∏–µ ({max_score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö):\n" + "\n".join(names)
    except Exception as e:
        text = f"‚ùó –û—à–∏–±–∫–∞: {e}"
    await msg.answer(text)
    await state.finish()

# === ADMIN: –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
@dp.callback_query_handler(lambda c: c.data=="admin_export")
async def admin_export(c: types.CallbackQuery):
    try:
        await send_excel_report(bot, ADMIN_CHAT, RESULTS_FILE, caption="üì• –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞")
    except Exception as e:
        await bot.send_message(ADMIN_CHAT, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")
    await c.answer()

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
